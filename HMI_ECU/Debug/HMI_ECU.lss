
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003da2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00003da2  00003e36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008000d8  008000d8  00003eae  2**0
                  ALLOC
  3 .stab         000032e8  00000000  00000000  00003eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010ca  00000000  00000000  00007198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008262  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000083c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008551  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a596  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b697  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c61c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ca5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d2ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3e       	cpi	r26, 0xEA	; 234
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <main>
      8a:	0c 94 cf 1e 	jmp	0x3d9e	; 0x3d9e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 53 1e 	jmp	0x3ca6	; 0x3ca6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ed       	ldi	r26, 0xD0	; 208
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6f 1e 	jmp	0x3cde	; 0x3cde <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 53 1e 	jmp	0x3ca6	; 0x3ca6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ed       	ldi	r24, 0xD0	; 208
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6f 1e 	jmp	0x3cde	; 0x3cde <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5b 1e 	jmp	0x3cb6	; 0x3cb6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ed       	ldi	r22, 0xD0	; 208
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 77 1e 	jmp	0x3cee	; 0x3cee <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 63 1e 	jmp	0x3cc6	; 0x3cc6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7f 1e 	jmp	0x3cfe	; 0x3cfe <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_COMPA_vect)
{
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	4f 93       	push	r20
     cae:	5f 93       	push	r21
     cb0:	6f 93       	push	r22
     cb2:	7f 93       	push	r23
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	af 93       	push	r26
     cba:	bf 93       	push	r27
     cbc:	ef 93       	push	r30
     cbe:	ff 93       	push	r31
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     cc8:	80 91 d8 00 	lds	r24, 0x00D8
     ccc:	90 91 d9 00 	lds	r25, 0x00D9
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	29 f0       	breq	.+10     	; 0xcde <__vector_7+0x40>
	{
		/* Call the Call Back function in the application at the timer compare value  */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     cd4:	e0 91 d8 00 	lds	r30, 0x00D8
     cd8:	f0 91 d9 00 	lds	r31, 0x00D9
     cdc:	09 95       	icall
	}
}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	ff 91       	pop	r31
     ce4:	ef 91       	pop	r30
     ce6:	bf 91       	pop	r27
     ce8:	af 91       	pop	r26
     cea:	9f 91       	pop	r25
     cec:	8f 91       	pop	r24
     cee:	7f 91       	pop	r23
     cf0:	6f 91       	pop	r22
     cf2:	5f 91       	pop	r21
     cf4:	4f 91       	pop	r20
     cf6:	3f 91       	pop	r19
     cf8:	2f 91       	pop	r18
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <Timer1_init>:
 * 2. Setup the timer mode.
 * 3. Setup the compare value for compare mode.
 * 4. Setup the pre-scaler value.
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
     d04:	df 93       	push	r29
     d06:	cf 93       	push	r28
     d08:	00 d0       	rcall	.+0      	; 0xd0a <Timer1_init+0x6>
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	9a 83       	std	Y+2, r25	; 0x02
     d10:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A=(1<<FOC1A);
     d12:	ef e4       	ldi	r30, 0x4F	; 79
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	88 e0       	ldi	r24, 0x08	; 8
     d18:	80 83       	st	Z, r24
	TCCR1B=Config_Ptr->mode;
     d1a:	ae e4       	ldi	r26, 0x4E	; 78
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e9 81       	ldd	r30, Y+1	; 0x01
     d20:	fa 81       	ldd	r31, Y+2	; 0x02
     d22:	85 81       	ldd	r24, Z+5	; 0x05
     d24:	8c 93       	st	X, r24
	TCCR1B|=Config_Ptr->prescaler;
     d26:	ae e4       	ldi	r26, 0x4E	; 78
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ee e4       	ldi	r30, 0x4E	; 78
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	90 81       	ld	r25, Z
     d30:	e9 81       	ldd	r30, Y+1	; 0x01
     d32:	fa 81       	ldd	r31, Y+2	; 0x02
     d34:	84 81       	ldd	r24, Z+4	; 0x04
     d36:	89 2b       	or	r24, r25
     d38:	8c 93       	st	X, r24
	TCNT1=Config_Ptr->initial_value;
     d3a:	ac e4       	ldi	r26, 0x4C	; 76
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e9 81       	ldd	r30, Y+1	; 0x01
     d40:	fa 81       	ldd	r31, Y+2	; 0x02
     d42:	80 81       	ld	r24, Z
     d44:	91 81       	ldd	r25, Z+1	; 0x01
     d46:	11 96       	adiw	r26, 0x01	; 1
     d48:	9c 93       	st	X, r25
     d4a:	8e 93       	st	-X, r24
	OCR1A=Config_Ptr->compare_value;
     d4c:	aa e4       	ldi	r26, 0x4A	; 74
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e9 81       	ldd	r30, Y+1	; 0x01
     d52:	fa 81       	ldd	r31, Y+2	; 0x02
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	9c 93       	st	X, r25
     d5c:	8e 93       	st	-X, r24
	TIMSK=(1<<OCIE1A);
     d5e:	e9 e5       	ldi	r30, 0x59	; 89
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 e1       	ldi	r24, 0x10	; 16
     d64:	80 83       	st	Z, r24
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <Timer1_deInit>:
 * Description :
 * Function responsible for reseting the Timer.
 */

void Timer1_deInit(void)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
     d78:	ef e4       	ldi	r30, 0x4F	; 79
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	10 82       	st	Z, r1
	TCCR1B=0;
     d7e:	ee e4       	ldi	r30, 0x4E	; 78
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	10 82       	st	Z, r1
	TCNT1=0;
     d84:	ec e4       	ldi	r30, 0x4C	; 76
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	11 82       	std	Z+1, r1	; 0x01
     d8a:	10 82       	st	Z, r1
	OCR1A=0;
     d8c:	ea e4       	ldi	r30, 0x4A	; 74
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	11 82       	std	Z+1, r1	; 0x01
     d92:	10 82       	st	Z, r1
	TIMSK=0;
     d94:	e9 e5       	ldi	r30, 0x59	; 89
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	10 82       	st	Z, r1
}
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <Timer1_setCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */

void Timer1_setCallBack(void(*a_ptr)(void))
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	00 d0       	rcall	.+0      	; 0xda6 <Timer1_setCallBack+0x6>
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	90 93 d9 00 	sts	0x00D9, r25
     db6:	80 93 d8 00 	sts	0x00D8, r24

}
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <GPIO_setupPinDirection+0x6>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <GPIO_setupPinDirection+0x8>
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	6a 83       	std	Y+2, r22	; 0x02
     dd6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	88 30       	cpi	r24, 0x08	; 8
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <GPIO_setupPinDirection+0x1c>
     dde:	d5 c0       	rjmp	.+426    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	84 30       	cpi	r24, 0x04	; 4
     de4:	08 f0       	brcs	.+2      	; 0xde8 <GPIO_setupPinDirection+0x24>
     de6:	d1 c0       	rjmp	.+418    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	28 2f       	mov	r18, r24
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	3d 83       	std	Y+5, r19	; 0x05
     df0:	2c 83       	std	Y+4, r18	; 0x04
     df2:	8c 81       	ldd	r24, Y+4	; 0x04
     df4:	9d 81       	ldd	r25, Y+5	; 0x05
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	91 05       	cpc	r25, r1
     dfa:	09 f4       	brne	.+2      	; 0xdfe <GPIO_setupPinDirection+0x3a>
     dfc:	43 c0       	rjmp	.+134    	; 0xe84 <GPIO_setupPinDirection+0xc0>
     dfe:	2c 81       	ldd	r18, Y+4	; 0x04
     e00:	3d 81       	ldd	r19, Y+5	; 0x05
     e02:	22 30       	cpi	r18, 0x02	; 2
     e04:	31 05       	cpc	r19, r1
     e06:	2c f4       	brge	.+10     	; 0xe12 <GPIO_setupPinDirection+0x4e>
     e08:	8c 81       	ldd	r24, Y+4	; 0x04
     e0a:	9d 81       	ldd	r25, Y+5	; 0x05
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	71 f0       	breq	.+28     	; 0xe2c <GPIO_setupPinDirection+0x68>
     e10:	bc c0       	rjmp	.+376    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
     e12:	2c 81       	ldd	r18, Y+4	; 0x04
     e14:	3d 81       	ldd	r19, Y+5	; 0x05
     e16:	22 30       	cpi	r18, 0x02	; 2
     e18:	31 05       	cpc	r19, r1
     e1a:	09 f4       	brne	.+2      	; 0xe1e <GPIO_setupPinDirection+0x5a>
     e1c:	5f c0       	rjmp	.+190    	; 0xedc <GPIO_setupPinDirection+0x118>
     e1e:	8c 81       	ldd	r24, Y+4	; 0x04
     e20:	9d 81       	ldd	r25, Y+5	; 0x05
     e22:	83 30       	cpi	r24, 0x03	; 3
     e24:	91 05       	cpc	r25, r1
     e26:	09 f4       	brne	.+2      	; 0xe2a <GPIO_setupPinDirection+0x66>
     e28:	85 c0       	rjmp	.+266    	; 0xf34 <GPIO_setupPinDirection+0x170>
     e2a:	af c0       	rjmp	.+350    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	a1 f4       	brne	.+40     	; 0xe5a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     e32:	aa e3       	ldi	r26, 0x3A	; 58
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	48 2f       	mov	r20, r24
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	02 2e       	mov	r0, r18
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <GPIO_setupPinDirection+0x8c>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	0a 94       	dec	r0
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <GPIO_setupPinDirection+0x88>
     e54:	84 2b       	or	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	98 c0       	rjmp	.+304    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e5a:	aa e3       	ldi	r26, 0x3A	; 58
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	ea e3       	ldi	r30, 0x3A	; 58
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <GPIO_setupPinDirection+0xb4>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <GPIO_setupPinDirection+0xb0>
     e7c:	80 95       	com	r24
     e7e:	84 23       	and	r24, r20
     e80:	8c 93       	st	X, r24
     e82:	83 c0       	rjmp	.+262    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	a1 f4       	brne	.+40     	; 0xeb2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e8a:	a7 e3       	ldi	r26, 0x37	; 55
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e7 e3       	ldi	r30, 0x37	; 55
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <GPIO_setupPinDirection+0xe4>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <GPIO_setupPinDirection+0xe0>
     eac:	84 2b       	or	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	6c c0       	rjmp	.+216    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     eb2:	a7 e3       	ldi	r26, 0x37	; 55
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e7 e3       	ldi	r30, 0x37	; 55
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	48 2f       	mov	r20, r24
     ebe:	8a 81       	ldd	r24, Y+2	; 0x02
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 2e       	mov	r0, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <GPIO_setupPinDirection+0x10c>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <GPIO_setupPinDirection+0x108>
     ed4:	80 95       	com	r24
     ed6:	84 23       	and	r24, r20
     ed8:	8c 93       	st	X, r24
     eda:	57 c0       	rjmp	.+174    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	a1 f4       	brne	.+40     	; 0xf0a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     ee2:	a4 e3       	ldi	r26, 0x34	; 52
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e4 e3       	ldi	r30, 0x34	; 52
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <GPIO_setupPinDirection+0x13c>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <GPIO_setupPinDirection+0x138>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	40 c0       	rjmp	.+128    	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f0a:	a4 e3       	ldi	r26, 0x34	; 52
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e4 e3       	ldi	r30, 0x34	; 52
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <GPIO_setupPinDirection+0x164>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <GPIO_setupPinDirection+0x160>
     f2c:	80 95       	com	r24
     f2e:	84 23       	and	r24, r20
     f30:	8c 93       	st	X, r24
     f32:	2b c0       	rjmp	.+86     	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	a1 f4       	brne	.+40     	; 0xf62 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     f3a:	a1 e3       	ldi	r26, 0x31	; 49
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e1 e3       	ldi	r30, 0x31	; 49
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <GPIO_setupPinDirection+0x194>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <GPIO_setupPinDirection+0x190>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	14 c0       	rjmp	.+40     	; 0xf8a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f62:	a1 e3       	ldi	r26, 0x31	; 49
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e1 e3       	ldi	r30, 0x31	; 49
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <GPIO_setupPinDirection+0x1bc>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <GPIO_setupPinDirection+0x1b8>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <GPIO_writePin+0x6>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <GPIO_writePin+0x8>
     fa2:	0f 92       	push	r0
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	6a 83       	std	Y+2, r22	; 0x02
     fac:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	88 30       	cpi	r24, 0x08	; 8
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <GPIO_writePin+0x1c>
     fb4:	d5 c0       	rjmp	.+426    	; 0x1160 <GPIO_writePin+0x1c6>
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	84 30       	cpi	r24, 0x04	; 4
     fba:	08 f0       	brcs	.+2      	; 0xfbe <GPIO_writePin+0x24>
     fbc:	d1 c0       	rjmp	.+418    	; 0x1160 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	3d 83       	std	Y+5, r19	; 0x05
     fc6:	2c 83       	std	Y+4, r18	; 0x04
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	9d 81       	ldd	r25, Y+5	; 0x05
     fcc:	81 30       	cpi	r24, 0x01	; 1
     fce:	91 05       	cpc	r25, r1
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <GPIO_writePin+0x3a>
     fd2:	43 c0       	rjmp	.+134    	; 0x105a <GPIO_writePin+0xc0>
     fd4:	2c 81       	ldd	r18, Y+4	; 0x04
     fd6:	3d 81       	ldd	r19, Y+5	; 0x05
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <GPIO_writePin+0x4e>
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	71 f0       	breq	.+28     	; 0x1002 <GPIO_writePin+0x68>
     fe6:	bc c0       	rjmp	.+376    	; 0x1160 <GPIO_writePin+0x1c6>
     fe8:	2c 81       	ldd	r18, Y+4	; 0x04
     fea:	3d 81       	ldd	r19, Y+5	; 0x05
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <GPIO_writePin+0x5a>
     ff2:	5f c0       	rjmp	.+190    	; 0x10b2 <GPIO_writePin+0x118>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	91 05       	cpc	r25, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <GPIO_writePin+0x66>
     ffe:	85 c0       	rjmp	.+266    	; 0x110a <GPIO_writePin+0x170>
    1000:	af c0       	rjmp	.+350    	; 0x1160 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	a1 f4       	brne	.+40     	; 0x1030 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1008:	ab e3       	ldi	r26, 0x3B	; 59
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	eb e3       	ldi	r30, 0x3B	; 59
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <GPIO_writePin+0x8c>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <GPIO_writePin+0x88>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	98 c0       	rjmp	.+304    	; 0x1160 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1030:	ab e3       	ldi	r26, 0x3B	; 59
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	eb e3       	ldi	r30, 0x3B	; 59
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_writePin+0xb4>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_writePin+0xb0>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	83 c0       	rjmp	.+262    	; 0x1160 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	a1 f4       	brne	.+40     	; 0x1088 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1060:	a8 e3       	ldi	r26, 0x38	; 56
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e8 e3       	ldi	r30, 0x38	; 56
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_writePin+0xe4>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_writePin+0xe0>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	6c c0       	rjmp	.+216    	; 0x1160 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1088:	a8 e3       	ldi	r26, 0x38	; 56
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e8 e3       	ldi	r30, 0x38	; 56
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <GPIO_writePin+0x10c>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <GPIO_writePin+0x108>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	57 c0       	rjmp	.+174    	; 0x1160 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	a1 f4       	brne	.+40     	; 0x10e0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    10b8:	a5 e3       	ldi	r26, 0x35	; 53
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e3       	ldi	r30, 0x35	; 53
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <GPIO_writePin+0x13c>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <GPIO_writePin+0x138>
    10da:	84 2b       	or	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	40 c0       	rjmp	.+128    	; 0x1160 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    10e0:	a5 e3       	ldi	r26, 0x35	; 53
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e5 e3       	ldi	r30, 0x35	; 53
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <GPIO_writePin+0x164>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <GPIO_writePin+0x160>
    1102:	80 95       	com	r24
    1104:	84 23       	and	r24, r20
    1106:	8c 93       	st	X, r24
    1108:	2b c0       	rjmp	.+86     	; 0x1160 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	a1 f4       	brne	.+40     	; 0x1138 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1110:	a2 e3       	ldi	r26, 0x32	; 50
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e2 e3       	ldi	r30, 0x32	; 50
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <GPIO_writePin+0x194>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <GPIO_writePin+0x190>
    1132:	84 2b       	or	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	14 c0       	rjmp	.+40     	; 0x1160 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1138:	a2 e3       	ldi	r26, 0x32	; 50
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e2 e3       	ldi	r30, 0x32	; 50
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <GPIO_writePin+0x1bc>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <GPIO_writePin+0x1b8>
    115a:	80 95       	com	r24
    115c:	84 23       	and	r24, r20
    115e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <GPIO_readPin+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <GPIO_readPin+0x8>
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	8a 83       	std	Y+2, r24	; 0x02
    1180:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1182:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	88 30       	cpi	r24, 0x08	; 8
    1188:	08 f0       	brcs	.+2      	; 0x118c <GPIO_readPin+0x1c>
    118a:	84 c0       	rjmp	.+264    	; 0x1294 <GPIO_readPin+0x124>
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	84 30       	cpi	r24, 0x04	; 4
    1190:	08 f0       	brcs	.+2      	; 0x1194 <GPIO_readPin+0x24>
    1192:	80 c0       	rjmp	.+256    	; 0x1294 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3d 83       	std	Y+5, r19	; 0x05
    119c:	2c 83       	std	Y+4, r18	; 0x04
    119e:	4c 81       	ldd	r20, Y+4	; 0x04
    11a0:	5d 81       	ldd	r21, Y+5	; 0x05
    11a2:	41 30       	cpi	r20, 0x01	; 1
    11a4:	51 05       	cpc	r21, r1
    11a6:	79 f1       	breq	.+94     	; 0x1206 <GPIO_readPin+0x96>
    11a8:	8c 81       	ldd	r24, Y+4	; 0x04
    11aa:	9d 81       	ldd	r25, Y+5	; 0x05
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	91 05       	cpc	r25, r1
    11b0:	34 f4       	brge	.+12     	; 0x11be <GPIO_readPin+0x4e>
    11b2:	2c 81       	ldd	r18, Y+4	; 0x04
    11b4:	3d 81       	ldd	r19, Y+5	; 0x05
    11b6:	21 15       	cp	r18, r1
    11b8:	31 05       	cpc	r19, r1
    11ba:	69 f0       	breq	.+26     	; 0x11d6 <GPIO_readPin+0x66>
    11bc:	6b c0       	rjmp	.+214    	; 0x1294 <GPIO_readPin+0x124>
    11be:	4c 81       	ldd	r20, Y+4	; 0x04
    11c0:	5d 81       	ldd	r21, Y+5	; 0x05
    11c2:	42 30       	cpi	r20, 0x02	; 2
    11c4:	51 05       	cpc	r21, r1
    11c6:	b9 f1       	breq	.+110    	; 0x1236 <GPIO_readPin+0xc6>
    11c8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ca:	9d 81       	ldd	r25, Y+5	; 0x05
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <GPIO_readPin+0x64>
    11d2:	49 c0       	rjmp	.+146    	; 0x1266 <GPIO_readPin+0xf6>
    11d4:	5f c0       	rjmp	.+190    	; 0x1294 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    11d6:	e9 e3       	ldi	r30, 0x39	; 57
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	88 2f       	mov	r24, r24
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	a9 01       	movw	r20, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <GPIO_readPin+0x7e>
    11ea:	55 95       	asr	r21
    11ec:	47 95       	ror	r20
    11ee:	8a 95       	dec	r24
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <GPIO_readPin+0x7a>
    11f2:	ca 01       	movw	r24, r20
    11f4:	81 70       	andi	r24, 0x01	; 1
    11f6:	90 70       	andi	r25, 0x00	; 0
    11f8:	88 23       	and	r24, r24
    11fa:	19 f0       	breq	.+6      	; 0x1202 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	49 c0       	rjmp	.+146    	; 0x1294 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1202:	19 82       	std	Y+1, r1	; 0x01
    1204:	47 c0       	rjmp	.+142    	; 0x1294 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1206:	e6 e3       	ldi	r30, 0x36	; 54
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	88 2f       	mov	r24, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a9 01       	movw	r20, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <GPIO_readPin+0xae>
    121a:	55 95       	asr	r21
    121c:	47 95       	ror	r20
    121e:	8a 95       	dec	r24
    1220:	e2 f7       	brpl	.-8      	; 0x121a <GPIO_readPin+0xaa>
    1222:	ca 01       	movw	r24, r20
    1224:	81 70       	andi	r24, 0x01	; 1
    1226:	90 70       	andi	r25, 0x00	; 0
    1228:	88 23       	and	r24, r24
    122a:	19 f0       	breq	.+6      	; 0x1232 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	31 c0       	rjmp	.+98     	; 0x1294 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1232:	19 82       	std	Y+1, r1	; 0x01
    1234:	2f c0       	rjmp	.+94     	; 0x1294 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1236:	e3 e3       	ldi	r30, 0x33	; 51
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a9 01       	movw	r20, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <GPIO_readPin+0xde>
    124a:	55 95       	asr	r21
    124c:	47 95       	ror	r20
    124e:	8a 95       	dec	r24
    1250:	e2 f7       	brpl	.-8      	; 0x124a <GPIO_readPin+0xda>
    1252:	ca 01       	movw	r24, r20
    1254:	81 70       	andi	r24, 0x01	; 1
    1256:	90 70       	andi	r25, 0x00	; 0
    1258:	88 23       	and	r24, r24
    125a:	19 f0       	breq	.+6      	; 0x1262 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	19 c0       	rjmp	.+50     	; 0x1294 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1262:	19 82       	std	Y+1, r1	; 0x01
    1264:	17 c0       	rjmp	.+46     	; 0x1294 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1266:	e0 e3       	ldi	r30, 0x30	; 48
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	a9 01       	movw	r20, r18
    1278:	02 c0       	rjmp	.+4      	; 0x127e <GPIO_readPin+0x10e>
    127a:	55 95       	asr	r21
    127c:	47 95       	ror	r20
    127e:	8a 95       	dec	r24
    1280:	e2 f7       	brpl	.-8      	; 0x127a <GPIO_readPin+0x10a>
    1282:	ca 01       	movw	r24, r20
    1284:	81 70       	andi	r24, 0x01	; 1
    1286:	90 70       	andi	r25, 0x00	; 0
    1288:	88 23       	and	r24, r24
    128a:	19 f0       	breq	.+6      	; 0x1292 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1292:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1294:	89 81       	ldd	r24, Y+1	; 0x01
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <GPIO_setupPortDirection+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <GPIO_setupPortDirection+0x8>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	89 83       	std	Y+1, r24	; 0x01
    12b4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12b6:	89 81       	ldd	r24, Y+1	; 0x01
    12b8:	84 30       	cpi	r24, 0x04	; 4
    12ba:	90 f5       	brcc	.+100    	; 0x1320 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3c 83       	std	Y+4, r19	; 0x04
    12c4:	2b 83       	std	Y+3, r18	; 0x03
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	d1 f0       	breq	.+52     	; 0x1304 <GPIO_setupPortDirection+0x5e>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <GPIO_setupPortDirection+0x3e>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	61 f0       	breq	.+24     	; 0x12fa <GPIO_setupPortDirection+0x54>
    12e2:	1e c0       	rjmp	.+60     	; 0x1320 <GPIO_setupPortDirection+0x7a>
    12e4:	2b 81       	ldd	r18, Y+3	; 0x03
    12e6:	3c 81       	ldd	r19, Y+4	; 0x04
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	81 f0       	breq	.+32     	; 0x130e <GPIO_setupPortDirection+0x68>
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	91 05       	cpc	r25, r1
    12f6:	81 f0       	breq	.+32     	; 0x1318 <GPIO_setupPortDirection+0x72>
    12f8:	13 c0       	rjmp	.+38     	; 0x1320 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    12fa:	ea e3       	ldi	r30, 0x3A	; 58
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	80 83       	st	Z, r24
    1302:	0e c0       	rjmp	.+28     	; 0x1320 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1304:	e7 e3       	ldi	r30, 0x37	; 55
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	80 83       	st	Z, r24
    130c:	09 c0       	rjmp	.+18     	; 0x1320 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    130e:	e4 e3       	ldi	r30, 0x34	; 52
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	80 83       	st	Z, r24
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1318:	e1 e3       	ldi	r30, 0x31	; 49
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <GPIO_writePort+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <GPIO_writePort+0x8>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	90 f5       	brcc	.+100    	; 0x13a8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	3c 83       	std	Y+4, r19	; 0x04
    134c:	2b 83       	std	Y+3, r18	; 0x03
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	91 05       	cpc	r25, r1
    1356:	d1 f0       	breq	.+52     	; 0x138c <GPIO_writePort+0x5e>
    1358:	2b 81       	ldd	r18, Y+3	; 0x03
    135a:	3c 81       	ldd	r19, Y+4	; 0x04
    135c:	22 30       	cpi	r18, 0x02	; 2
    135e:	31 05       	cpc	r19, r1
    1360:	2c f4       	brge	.+10     	; 0x136c <GPIO_writePort+0x3e>
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	00 97       	sbiw	r24, 0x00	; 0
    1368:	61 f0       	breq	.+24     	; 0x1382 <GPIO_writePort+0x54>
    136a:	1e c0       	rjmp	.+60     	; 0x13a8 <GPIO_writePort+0x7a>
    136c:	2b 81       	ldd	r18, Y+3	; 0x03
    136e:	3c 81       	ldd	r19, Y+4	; 0x04
    1370:	22 30       	cpi	r18, 0x02	; 2
    1372:	31 05       	cpc	r19, r1
    1374:	81 f0       	breq	.+32     	; 0x1396 <GPIO_writePort+0x68>
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	91 05       	cpc	r25, r1
    137e:	81 f0       	breq	.+32     	; 0x13a0 <GPIO_writePort+0x72>
    1380:	13 c0       	rjmp	.+38     	; 0x13a8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1382:	eb e3       	ldi	r30, 0x3B	; 59
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	80 83       	st	Z, r24
    138a:	0e c0       	rjmp	.+28     	; 0x13a8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    138c:	e8 e3       	ldi	r30, 0x38	; 56
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	80 83       	st	Z, r24
    1394:	09 c0       	rjmp	.+18     	; 0x13a8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1396:	e5 e3       	ldi	r30, 0x35	; 53
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	80 83       	st	Z, r24
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    13a0:	e2 e3       	ldi	r30, 0x32	; 50
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	80 83       	st	Z, r24
			break;
		}
	}
}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <GPIO_readPort+0x6>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <GPIO_readPort+0x8>
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
    13c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    13c4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	84 30       	cpi	r24, 0x04	; 4
    13ca:	90 f5       	brcc	.+100    	; 0x1430 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	3c 83       	std	Y+4, r19	; 0x04
    13d4:	2b 83       	std	Y+3, r18	; 0x03
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	91 05       	cpc	r25, r1
    13de:	d1 f0       	breq	.+52     	; 0x1414 <GPIO_readPort+0x5e>
    13e0:	2b 81       	ldd	r18, Y+3	; 0x03
    13e2:	3c 81       	ldd	r19, Y+4	; 0x04
    13e4:	22 30       	cpi	r18, 0x02	; 2
    13e6:	31 05       	cpc	r19, r1
    13e8:	2c f4       	brge	.+10     	; 0x13f4 <GPIO_readPort+0x3e>
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	61 f0       	breq	.+24     	; 0x140a <GPIO_readPort+0x54>
    13f2:	1e c0       	rjmp	.+60     	; 0x1430 <GPIO_readPort+0x7a>
    13f4:	2b 81       	ldd	r18, Y+3	; 0x03
    13f6:	3c 81       	ldd	r19, Y+4	; 0x04
    13f8:	22 30       	cpi	r18, 0x02	; 2
    13fa:	31 05       	cpc	r19, r1
    13fc:	81 f0       	breq	.+32     	; 0x141e <GPIO_readPort+0x68>
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	9c 81       	ldd	r25, Y+4	; 0x04
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	91 05       	cpc	r25, r1
    1406:	81 f0       	breq	.+32     	; 0x1428 <GPIO_readPort+0x72>
    1408:	13 c0       	rjmp	.+38     	; 0x1430 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    140a:	e9 e3       	ldi	r30, 0x39	; 57
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	0e c0       	rjmp	.+28     	; 0x1430 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1414:	e6 e3       	ldi	r30, 0x36	; 54
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    141e:	e3 e3       	ldi	r30, 0x33	; 51
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1428:	e0 e3       	ldi	r30, 0x30	; 48
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1430:	89 81       	ldd	r24, Y+1	; 0x01
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <KEYPAD_getPressedKey+0x6>
    1446:	cd b7       	in	r28, 0x3d	; 61
    1448:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_OUTPUT);
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	41 e0       	ldi	r20, 0x01	; 1
    1450:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_OUTPUT);
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	61 e0       	ldi	r22, 0x01	; 1
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_OUTPUT);
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_OUTPUT);
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	63 e0       	ldi	r22, 0x03	; 3
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>

	/* Set/Clear the row output pin */
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_RELEASED);
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, KEYPAD_BUTTON_RELEASED);
    147c:	80 e0       	ldi	r24, 0x00	; 0
    147e:	61 e0       	ldi	r22, 0x01	; 1
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, KEYPAD_BUTTON_RELEASED);
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	62 e0       	ldi	r22, 0x02	; 2
    148a:	41 e0       	ldi	r20, 0x01	; 1
    148c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
	GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, KEYPAD_BUTTON_RELEASED);
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	63 e0       	ldi	r22, 0x03	; 3
    1494:	41 e0       	ldi	r20, 0x01	; 1
    1496:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	64 e0       	ldi	r22, 0x04	; 4
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	65 e0       	ldi	r22, 0x05	; 5
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	66 e0       	ldi	r22, 0x06	; 6
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	67 e0       	ldi	r22, 0x07	; 7
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    14c2:	19 82       	std	Y+1, r1	; 0x01
    14c4:	35 c0       	rjmp	.+106    	; 0x1530 <KEYPAD_getPressedKey+0xf0>
			 * except this row will be output pin
			 */
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	69 81       	ldd	r22, Y+1	; 0x01
    14ca:	40 e0       	ldi	r20, 0x00	; 0
    14cc:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    14d0:	1a 82       	std	Y+2, r1	; 0x02
    14d2:	23 c0       	rjmp	.+70     	; 0x151a <KEYPAD_getPressedKey+0xda>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	98 2f       	mov	r25, r24
    14d8:	9c 5f       	subi	r25, 0xFC	; 252
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	69 2f       	mov	r22, r25
    14de:	0e 94 b8 08 	call	0x1170	; 0x1170 <GPIO_readPin>
    14e2:	88 23       	and	r24, r24
    14e4:	b9 f4       	brne	.+46     	; 0x1514 <KEYPAD_getPressedKey+0xd4>
				{
//					GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
					GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	69 81       	ldd	r22, Y+1	; 0x01
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	88 2f       	mov	r24, r24
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	98 2f       	mov	r25, r24
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	89 0f       	add	r24, r25
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	0e 94 9c 0a 	call	0x1538	; 0x1538 <KEYPAD_4x4_adjustKeyNumber>
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
		}
	}
}
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	8f 5f       	subi	r24, 0xFF	; 255
    1518:	8a 83       	std	Y+2, r24	; 0x02
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	84 30       	cpi	r24, 0x04	; 4
    151e:	d0 f2       	brcs	.-76     	; 0x14d4 <KEYPAD_getPressedKey+0x94>
						#endif
					#endif
				}
			}
//			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_RELEASED);
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	69 81       	ldd	r22, Y+1	; 0x01
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	8f 5f       	subi	r24, 0xFF	; 255
    152e:	89 83       	std	Y+1, r24	; 0x01
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	84 30       	cpi	r24, 0x04	; 4
    1534:	40 f2       	brcs	.-112    	; 0x14c6 <KEYPAD_getPressedKey+0x86>
    1536:	c5 cf       	rjmp	.-118    	; 0x14c2 <KEYPAD_getPressedKey+0x82>

00001538 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <KEYPAD_4x4_adjustKeyNumber+0x6>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1546:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	3c 83       	std	Y+4, r19	; 0x04
    1550:	2b 83       	std	Y+3, r18	; 0x03
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	88 30       	cpi	r24, 0x08	; 8
    1558:	91 05       	cpc	r25, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <KEYPAD_4x4_adjustKeyNumber+0x26>
    155c:	70 c0       	rjmp	.+224    	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x106>
    155e:	2b 81       	ldd	r18, Y+3	; 0x03
    1560:	3c 81       	ldd	r19, Y+4	; 0x04
    1562:	29 30       	cpi	r18, 0x09	; 9
    1564:	31 05       	cpc	r19, r1
    1566:	5c f5       	brge	.+86     	; 0x15be <KEYPAD_4x4_adjustKeyNumber+0x86>
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	84 30       	cpi	r24, 0x04	; 4
    156e:	91 05       	cpc	r25, r1
    1570:	09 f4       	brne	.+2      	; 0x1574 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1572:	59 c0       	rjmp	.+178    	; 0x1626 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1574:	2b 81       	ldd	r18, Y+3	; 0x03
    1576:	3c 81       	ldd	r19, Y+4	; 0x04
    1578:	25 30       	cpi	r18, 0x05	; 5
    157a:	31 05       	cpc	r19, r1
    157c:	9c f4       	brge	.+38     	; 0x15a4 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	91 05       	cpc	r25, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <KEYPAD_4x4_adjustKeyNumber+0x52>
    1588:	48 c0       	rjmp	.+144    	; 0x161a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    158a:	2b 81       	ldd	r18, Y+3	; 0x03
    158c:	3c 81       	ldd	r19, Y+4	; 0x04
    158e:	23 30       	cpi	r18, 0x03	; 3
    1590:	31 05       	cpc	r19, r1
    1592:	0c f0       	brlt	.+2      	; 0x1596 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1594:	45 c0       	rjmp	.+138    	; 0x1620 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	81 30       	cpi	r24, 0x01	; 1
    159c:	91 05       	cpc	r25, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    15a0:	39 c0       	rjmp	.+114    	; 0x1614 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    15a2:	67 c0       	rjmp	.+206    	; 0x1672 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    15a4:	2b 81       	ldd	r18, Y+3	; 0x03
    15a6:	3c 81       	ldd	r19, Y+4	; 0x04
    15a8:	26 30       	cpi	r18, 0x06	; 6
    15aa:	31 05       	cpc	r19, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <KEYPAD_4x4_adjustKeyNumber+0x78>
    15ae:	41 c0       	rjmp	.+130    	; 0x1632 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	9c 81       	ldd	r25, Y+4	; 0x04
    15b4:	87 30       	cpi	r24, 0x07	; 7
    15b6:	91 05       	cpc	r25, r1
    15b8:	0c f0       	brlt	.+2      	; 0x15bc <KEYPAD_4x4_adjustKeyNumber+0x84>
    15ba:	3e c0       	rjmp	.+124    	; 0x1638 <KEYPAD_4x4_adjustKeyNumber+0x100>
    15bc:	37 c0       	rjmp	.+110    	; 0x162c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    15be:	2b 81       	ldd	r18, Y+3	; 0x03
    15c0:	3c 81       	ldd	r19, Y+4	; 0x04
    15c2:	2c 30       	cpi	r18, 0x0C	; 12
    15c4:	31 05       	cpc	r19, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <KEYPAD_4x4_adjustKeyNumber+0x92>
    15c8:	46 c0       	rjmp	.+140    	; 0x1656 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	8d 30       	cpi	r24, 0x0D	; 13
    15d0:	91 05       	cpc	r25, r1
    15d2:	5c f4       	brge	.+22     	; 0x15ea <KEYPAD_4x4_adjustKeyNumber+0xb2>
    15d4:	2b 81       	ldd	r18, Y+3	; 0x03
    15d6:	3c 81       	ldd	r19, Y+4	; 0x04
    15d8:	2a 30       	cpi	r18, 0x0A	; 10
    15da:	31 05       	cpc	r19, r1
    15dc:	b1 f1       	breq	.+108    	; 0x164a <KEYPAD_4x4_adjustKeyNumber+0x112>
    15de:	8b 81       	ldd	r24, Y+3	; 0x03
    15e0:	9c 81       	ldd	r25, Y+4	; 0x04
    15e2:	8b 30       	cpi	r24, 0x0B	; 11
    15e4:	91 05       	cpc	r25, r1
    15e6:	a4 f5       	brge	.+104    	; 0x1650 <KEYPAD_4x4_adjustKeyNumber+0x118>
    15e8:	2d c0       	rjmp	.+90     	; 0x1644 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    15ea:	2b 81       	ldd	r18, Y+3	; 0x03
    15ec:	3c 81       	ldd	r19, Y+4	; 0x04
    15ee:	2e 30       	cpi	r18, 0x0E	; 14
    15f0:	31 05       	cpc	r19, r1
    15f2:	b9 f1       	breq	.+110    	; 0x1662 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	8e 30       	cpi	r24, 0x0E	; 14
    15fa:	91 05       	cpc	r25, r1
    15fc:	7c f1       	brlt	.+94     	; 0x165c <KEYPAD_4x4_adjustKeyNumber+0x124>
    15fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1600:	3c 81       	ldd	r19, Y+4	; 0x04
    1602:	2f 30       	cpi	r18, 0x0F	; 15
    1604:	31 05       	cpc	r19, r1
    1606:	79 f1       	breq	.+94     	; 0x1666 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	80 31       	cpi	r24, 0x10	; 16
    160e:	91 05       	cpc	r25, r1
    1610:	69 f1       	breq	.+90     	; 0x166c <KEYPAD_4x4_adjustKeyNumber+0x134>
    1612:	2f c0       	rjmp	.+94     	; 0x1672 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1614:	87 e0       	ldi	r24, 0x07	; 7
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	2e c0       	rjmp	.+92     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    161a:	88 e0       	ldi	r24, 0x08	; 8
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	2b c0       	rjmp	.+86     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1620:	89 e0       	ldi	r24, 0x09	; 9
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	28 c0       	rjmp	.+80     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1626:	85 e2       	ldi	r24, 0x25	; 37
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	25 c0       	rjmp	.+74     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    162c:	84 e0       	ldi	r24, 0x04	; 4
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	22 c0       	rjmp	.+68     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1632:	85 e0       	ldi	r24, 0x05	; 5
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	1f c0       	rjmp	.+62     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1638:	86 e0       	ldi	r24, 0x06	; 6
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	1c c0       	rjmp	.+56     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    163e:	8a e2       	ldi	r24, 0x2A	; 42
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	19 c0       	rjmp	.+50     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	16 c0       	rjmp	.+44     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	13 c0       	rjmp	.+38     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	10 c0       	rjmp	.+32     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1656:	8d e2       	ldi	r24, 0x2D	; 45
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	0d c0       	rjmp	.+26     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    165c:	8d e0       	ldi	r24, 0x0D	; 13
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	0a c0       	rjmp	.+20     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1662:	19 82       	std	Y+1, r1	; 0x01
    1664:	08 c0       	rjmp	.+16     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1666:	8d e3       	ldi	r24, 0x3D	; 61
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	05 c0       	rjmp	.+10     	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    166c:	8b e2       	ldi	r24, 0x2B	; 43
    166e:	89 83       	std	Y+1, r24	; 0x01
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1676:	89 81       	ldd	r24, Y+1	; 0x01
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	2e 97       	sbiw	r28, 0x0e	; 14
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	64 e0       	ldi	r22, 0x04	; 4
    169e:	41 e0       	ldi	r20, 0x01	; 1
    16a0:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	65 e0       	ldi	r22, 0x05	; 5
    16a8:	41 e0       	ldi	r20, 0x01	; 1
    16aa:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <GPIO_setupPinDirection>
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a0 ea       	ldi	r26, 0xA0	; 160
    16b4:	b1 e4       	ldi	r27, 0x41	; 65
    16b6:	8b 87       	std	Y+11, r24	; 0x0b
    16b8:	9c 87       	std	Y+12, r25	; 0x0c
    16ba:	ad 87       	std	Y+13, r26	; 0x0d
    16bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16be:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	4a ef       	ldi	r20, 0xFA	; 250
    16cc:	54 e4       	ldi	r21, 0x44	; 68
    16ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	8f 83       	std	Y+7, r24	; 0x07
    16d8:	98 87       	std	Y+8, r25	; 0x08
    16da:	a9 87       	std	Y+9, r26	; 0x09
    16dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16de:	6f 81       	ldd	r22, Y+7	; 0x07
    16e0:	78 85       	ldd	r23, Y+8	; 0x08
    16e2:	89 85       	ldd	r24, Y+9	; 0x09
    16e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e8       	ldi	r20, 0x80	; 128
    16ec:	5f e3       	ldi	r21, 0x3F	; 63
    16ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16f2:	88 23       	and	r24, r24
    16f4:	2c f4       	brge	.+10     	; 0x1700 <LCD_init+0x7a>
		__ticks = 1;
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9e 83       	std	Y+6, r25	; 0x06
    16fc:	8d 83       	std	Y+5, r24	; 0x05
    16fe:	3f c0       	rjmp	.+126    	; 0x177e <LCD_init+0xf8>
	else if (__tmp > 65535)
    1700:	6f 81       	ldd	r22, Y+7	; 0x07
    1702:	78 85       	ldd	r23, Y+8	; 0x08
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	3f ef       	ldi	r19, 0xFF	; 255
    170c:	4f e7       	ldi	r20, 0x7F	; 127
    170e:	57 e4       	ldi	r21, 0x47	; 71
    1710:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1714:	18 16       	cp	r1, r24
    1716:	4c f5       	brge	.+82     	; 0x176a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1718:	6b 85       	ldd	r22, Y+11	; 0x0b
    171a:	7c 85       	ldd	r23, Y+12	; 0x0c
    171c:	8d 85       	ldd	r24, Y+13	; 0x0d
    171e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e2       	ldi	r20, 0x20	; 32
    1726:	51 e4       	ldi	r21, 0x41	; 65
    1728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	bc 01       	movw	r22, r24
    1732:	cd 01       	movw	r24, r26
    1734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	9e 83       	std	Y+6, r25	; 0x06
    173e:	8d 83       	std	Y+5, r24	; 0x05
    1740:	0f c0       	rjmp	.+30     	; 0x1760 <LCD_init+0xda>
    1742:	88 ec       	ldi	r24, 0xC8	; 200
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	9c 83       	std	Y+4, r25	; 0x04
    1748:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	9c 81       	ldd	r25, Y+4	; 0x04
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <LCD_init+0xc8>
    1752:	9c 83       	std	Y+4, r25	; 0x04
    1754:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	9e 81       	ldd	r25, Y+6	; 0x06
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	9e 83       	std	Y+6, r25	; 0x06
    175e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1760:	8d 81       	ldd	r24, Y+5	; 0x05
    1762:	9e 81       	ldd	r25, Y+6	; 0x06
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	69 f7       	brne	.-38     	; 0x1742 <LCD_init+0xbc>
    1768:	14 c0       	rjmp	.+40     	; 0x1792 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    176a:	6f 81       	ldd	r22, Y+7	; 0x07
    176c:	78 85       	ldd	r23, Y+8	; 0x08
    176e:	89 85       	ldd	r24, Y+9	; 0x09
    1770:	9a 85       	ldd	r25, Y+10	; 0x0a
    1772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	9e 83       	std	Y+6, r25	; 0x06
    177c:	8d 83       	std	Y+5, r24	; 0x05
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	9a 83       	std	Y+2, r25	; 0x02
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	89 81       	ldd	r24, Y+1	; 0x01
    1788:	9a 81       	ldd	r25, Y+2	; 0x02
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	f1 f7       	brne	.-4      	; 0x178a <LCD_init+0x104>
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	6f ef       	ldi	r22, 0xFF	; 255
    1796:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    179a:	88 e3       	ldi	r24, 0x38	; 56
    179c:	0e 94 df 0b 	call	0x17be	; 0x17be <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    17a0:	8c e0       	ldi	r24, 0x0C	; 12
    17a2:	0e 94 df 0b 	call	0x17be	; 0x17be <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	0e 94 df 0b 	call	0x17be	; 0x17be <LCD_sendCommand>
}
    17ac:	2e 96       	adiw	r28, 0x0e	; 14
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	de bf       	out	0x3e, r29	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	cd bf       	out	0x3d, r28	; 61
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	e9 97       	sbiw	r28, 0x39	; 57
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    17d4:	83 e0       	ldi	r24, 0x03	; 3
    17d6:	64 e0       	ldi	r22, 0x04	; 4
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	a0 e8       	ldi	r26, 0x80	; 128
    17e4:	bf e3       	ldi	r27, 0x3F	; 63
    17e6:	8d ab       	std	Y+53, r24	; 0x35
    17e8:	9e ab       	std	Y+54, r25	; 0x36
    17ea:	af ab       	std	Y+55, r26	; 0x37
    17ec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ee:	6d a9       	ldd	r22, Y+53	; 0x35
    17f0:	7e a9       	ldd	r23, Y+54	; 0x36
    17f2:	8f a9       	ldd	r24, Y+55	; 0x37
    17f4:	98 ad       	ldd	r25, Y+56	; 0x38
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	4a ef       	ldi	r20, 0xFA	; 250
    17fc:	54 e4       	ldi	r21, 0x44	; 68
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	89 ab       	std	Y+49, r24	; 0x31
    1808:	9a ab       	std	Y+50, r25	; 0x32
    180a:	ab ab       	std	Y+51, r26	; 0x33
    180c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    180e:	69 a9       	ldd	r22, Y+49	; 0x31
    1810:	7a a9       	ldd	r23, Y+50	; 0x32
    1812:	8b a9       	ldd	r24, Y+51	; 0x33
    1814:	9c a9       	ldd	r25, Y+52	; 0x34
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1822:	88 23       	and	r24, r24
    1824:	2c f4       	brge	.+10     	; 0x1830 <LCD_sendCommand+0x72>
		__ticks = 1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	98 ab       	std	Y+48, r25	; 0x30
    182c:	8f a7       	std	Y+47, r24	; 0x2f
    182e:	3f c0       	rjmp	.+126    	; 0x18ae <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1830:	69 a9       	ldd	r22, Y+49	; 0x31
    1832:	7a a9       	ldd	r23, Y+50	; 0x32
    1834:	8b a9       	ldd	r24, Y+51	; 0x33
    1836:	9c a9       	ldd	r25, Y+52	; 0x34
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	3f ef       	ldi	r19, 0xFF	; 255
    183c:	4f e7       	ldi	r20, 0x7F	; 127
    183e:	57 e4       	ldi	r21, 0x47	; 71
    1840:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1844:	18 16       	cp	r1, r24
    1846:	4c f5       	brge	.+82     	; 0x189a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1848:	6d a9       	ldd	r22, Y+53	; 0x35
    184a:	7e a9       	ldd	r23, Y+54	; 0x36
    184c:	8f a9       	ldd	r24, Y+55	; 0x37
    184e:	98 ad       	ldd	r25, Y+56	; 0x38
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e2       	ldi	r20, 0x20	; 32
    1856:	51 e4       	ldi	r21, 0x41	; 65
    1858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	98 ab       	std	Y+48, r25	; 0x30
    186e:	8f a7       	std	Y+47, r24	; 0x2f
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <LCD_sendCommand+0xd2>
    1872:	88 ec       	ldi	r24, 0xC8	; 200
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	9e a7       	std	Y+46, r25	; 0x2e
    1878:	8d a7       	std	Y+45, r24	; 0x2d
    187a:	8d a5       	ldd	r24, Y+45	; 0x2d
    187c:	9e a5       	ldd	r25, Y+46	; 0x2e
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <LCD_sendCommand+0xc0>
    1882:	9e a7       	std	Y+46, r25	; 0x2e
    1884:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1886:	8f a5       	ldd	r24, Y+47	; 0x2f
    1888:	98 a9       	ldd	r25, Y+48	; 0x30
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	98 ab       	std	Y+48, r25	; 0x30
    188e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1890:	8f a5       	ldd	r24, Y+47	; 0x2f
    1892:	98 a9       	ldd	r25, Y+48	; 0x30
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	69 f7       	brne	.-38     	; 0x1872 <LCD_sendCommand+0xb4>
    1898:	14 c0       	rjmp	.+40     	; 0x18c2 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189a:	69 a9       	ldd	r22, Y+49	; 0x31
    189c:	7a a9       	ldd	r23, Y+50	; 0x32
    189e:	8b a9       	ldd	r24, Y+51	; 0x33
    18a0:	9c a9       	ldd	r25, Y+52	; 0x34
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	98 ab       	std	Y+48, r25	; 0x30
    18ac:	8f a7       	std	Y+47, r24	; 0x2f
    18ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b0:	98 a9       	ldd	r25, Y+48	; 0x30
    18b2:	9c a7       	std	Y+44, r25	; 0x2c
    18b4:	8b a7       	std	Y+43, r24	; 0x2b
    18b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    18b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <LCD_sendCommand+0xfc>
    18be:	9c a7       	std	Y+44, r25	; 0x2c
    18c0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18c2:	83 e0       	ldi	r24, 0x03	; 3
    18c4:	65 e0       	ldi	r22, 0x05	; 5
    18c6:	41 e0       	ldi	r20, 0x01	; 1
    18c8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a0 e8       	ldi	r26, 0x80	; 128
    18d2:	bf e3       	ldi	r27, 0x3F	; 63
    18d4:	8f a3       	std	Y+39, r24	; 0x27
    18d6:	98 a7       	std	Y+40, r25	; 0x28
    18d8:	a9 a7       	std	Y+41, r26	; 0x29
    18da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	6f a1       	ldd	r22, Y+39	; 0x27
    18de:	78 a5       	ldd	r23, Y+40	; 0x28
    18e0:	89 a5       	ldd	r24, Y+41	; 0x29
    18e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a ef       	ldi	r20, 0xFA	; 250
    18ea:	54 e4       	ldi	r21, 0x44	; 68
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	8b a3       	std	Y+35, r24	; 0x23
    18f6:	9c a3       	std	Y+36, r25	; 0x24
    18f8:	ad a3       	std	Y+37, r26	; 0x25
    18fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18fc:	6b a1       	ldd	r22, Y+35	; 0x23
    18fe:	7c a1       	ldd	r23, Y+36	; 0x24
    1900:	8d a1       	ldd	r24, Y+37	; 0x25
    1902:	9e a1       	ldd	r25, Y+38	; 0x26
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	2c f4       	brge	.+10     	; 0x191e <LCD_sendCommand+0x160>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9a a3       	std	Y+34, r25	; 0x22
    191a:	89 a3       	std	Y+33, r24	; 0x21
    191c:	3f c0       	rjmp	.+126    	; 0x199c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    191e:	6b a1       	ldd	r22, Y+35	; 0x23
    1920:	7c a1       	ldd	r23, Y+36	; 0x24
    1922:	8d a1       	ldd	r24, Y+37	; 0x25
    1924:	9e a1       	ldd	r25, Y+38	; 0x26
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	3f ef       	ldi	r19, 0xFF	; 255
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	57 e4       	ldi	r21, 0x47	; 71
    192e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	4c f5       	brge	.+82     	; 0x1988 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	6f a1       	ldd	r22, Y+39	; 0x27
    1938:	78 a5       	ldd	r23, Y+40	; 0x28
    193a:	89 a5       	ldd	r24, Y+41	; 0x29
    193c:	9a a5       	ldd	r25, Y+42	; 0x2a
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9a a3       	std	Y+34, r25	; 0x22
    195c:	89 a3       	std	Y+33, r24	; 0x21
    195e:	0f c0       	rjmp	.+30     	; 0x197e <LCD_sendCommand+0x1c0>
    1960:	88 ec       	ldi	r24, 0xC8	; 200
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	98 a3       	std	Y+32, r25	; 0x20
    1966:	8f 8f       	std	Y+31, r24	; 0x1f
    1968:	8f 8d       	ldd	r24, Y+31	; 0x1f
    196a:	98 a1       	ldd	r25, Y+32	; 0x20
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <LCD_sendCommand+0x1ae>
    1970:	98 a3       	std	Y+32, r25	; 0x20
    1972:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	89 a1       	ldd	r24, Y+33	; 0x21
    1976:	9a a1       	ldd	r25, Y+34	; 0x22
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9a a3       	std	Y+34, r25	; 0x22
    197c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	89 a1       	ldd	r24, Y+33	; 0x21
    1980:	9a a1       	ldd	r25, Y+34	; 0x22
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <LCD_sendCommand+0x1a2>
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	6b a1       	ldd	r22, Y+35	; 0x23
    198a:	7c a1       	ldd	r23, Y+36	; 0x24
    198c:	8d a1       	ldd	r24, Y+37	; 0x25
    198e:	9e a1       	ldd	r25, Y+38	; 0x26
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9a a3       	std	Y+34, r25	; 0x22
    199a:	89 a3       	std	Y+33, r24	; 0x21
    199c:	89 a1       	ldd	r24, Y+33	; 0x21
    199e:	9a a1       	ldd	r25, Y+34	; 0x22
    19a0:	9e 8f       	std	Y+30, r25	; 0x1e
    19a2:	8d 8f       	std	Y+29, r24	; 0x1d
    19a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <LCD_sendCommand+0x1ea>
    19ac:	9e 8f       	std	Y+30, r25	; 0x1e
    19ae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	69 ad       	ldd	r22, Y+57	; 0x39
    19b4:	0e 94 97 09 	call	0x132e	; 0x132e <GPIO_writePort>
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	a0 e8       	ldi	r26, 0x80	; 128
    19be:	bf e3       	ldi	r27, 0x3F	; 63
    19c0:	89 8f       	std	Y+25, r24	; 0x19
    19c2:	9a 8f       	std	Y+26, r25	; 0x1a
    19c4:	ab 8f       	std	Y+27, r26	; 0x1b
    19c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	4a ef       	ldi	r20, 0xFA	; 250
    19d6:	54 e4       	ldi	r21, 0x44	; 68
    19d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	8d 8b       	std	Y+21, r24	; 0x15
    19e2:	9e 8b       	std	Y+22, r25	; 0x16
    19e4:	af 8b       	std	Y+23, r26	; 0x17
    19e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ea:	7e 89       	ldd	r23, Y+22	; 0x16
    19ec:	8f 89       	ldd	r24, Y+23	; 0x17
    19ee:	98 8d       	ldd	r25, Y+24	; 0x18
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	5f e3       	ldi	r21, 0x3F	; 63
    19f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19fc:	88 23       	and	r24, r24
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <LCD_sendCommand+0x24c>
		__ticks = 1;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	9c 8b       	std	Y+20, r25	; 0x14
    1a06:	8b 8b       	std	Y+19, r24	; 0x13
    1a08:	3f c0       	rjmp	.+126    	; 0x1a88 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a10:	98 8d       	ldd	r25, Y+24	; 0x18
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	3f ef       	ldi	r19, 0xFF	; 255
    1a16:	4f e7       	ldi	r20, 0x7F	; 127
    1a18:	57 e4       	ldi	r21, 0x47	; 71
    1a1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a1e:	18 16       	cp	r1, r24
    1a20:	4c f5       	brge	.+82     	; 0x1a74 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a22:	69 8d       	ldd	r22, Y+25	; 0x19
    1a24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e2       	ldi	r20, 0x20	; 32
    1a30:	51 e4       	ldi	r21, 0x41	; 65
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9c 8b       	std	Y+20, r25	; 0x14
    1a48:	8b 8b       	std	Y+19, r24	; 0x13
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <LCD_sendCommand+0x2ac>
    1a4c:	88 ec       	ldi	r24, 0xC8	; 200
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	9a 8b       	std	Y+18, r25	; 0x12
    1a52:	89 8b       	std	Y+17, r24	; 0x11
    1a54:	89 89       	ldd	r24, Y+17	; 0x11
    1a56:	9a 89       	ldd	r25, Y+18	; 0x12
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_sendCommand+0x29a>
    1a5c:	9a 8b       	std	Y+18, r25	; 0x12
    1a5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a60:	8b 89       	ldd	r24, Y+19	; 0x13
    1a62:	9c 89       	ldd	r25, Y+20	; 0x14
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	9c 8b       	std	Y+20, r25	; 0x14
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	69 f7       	brne	.-38     	; 0x1a4c <LCD_sendCommand+0x28e>
    1a72:	14 c0       	rjmp	.+40     	; 0x1a9c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a74:	6d 89       	ldd	r22, Y+21	; 0x15
    1a76:	7e 89       	ldd	r23, Y+22	; 0x16
    1a78:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9c 8b       	std	Y+20, r25	; 0x14
    1a86:	8b 8b       	std	Y+19, r24	; 0x13
    1a88:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8c:	98 8b       	std	Y+16, r25	; 0x10
    1a8e:	8f 87       	std	Y+15, r24	; 0x0f
    1a90:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a92:	98 89       	ldd	r25, Y+16	; 0x10
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <LCD_sendCommand+0x2d6>
    1a98:	98 8b       	std	Y+16, r25	; 0x10
    1a9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	65 e0       	ldi	r22, 0x05	; 5
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	a0 e8       	ldi	r26, 0x80	; 128
    1aac:	bf e3       	ldi	r27, 0x3F	; 63
    1aae:	8b 87       	std	Y+11, r24	; 0x0b
    1ab0:	9c 87       	std	Y+12, r25	; 0x0c
    1ab2:	ad 87       	std	Y+13, r26	; 0x0d
    1ab4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	4a ef       	ldi	r20, 0xFA	; 250
    1ac4:	54 e4       	ldi	r21, 0x44	; 68
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	8f 83       	std	Y+7, r24	; 0x07
    1ad0:	98 87       	std	Y+8, r25	; 0x08
    1ad2:	a9 87       	std	Y+9, r26	; 0x09
    1ad4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad8:	78 85       	ldd	r23, Y+8	; 0x08
    1ada:	89 85       	ldd	r24, Y+9	; 0x09
    1adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e8       	ldi	r20, 0x80	; 128
    1ae4:	5f e3       	ldi	r21, 0x3F	; 63
    1ae6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aea:	88 23       	and	r24, r24
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9e 83       	std	Y+6, r25	; 0x06
    1af4:	8d 83       	std	Y+5, r24	; 0x05
    1af6:	3f c0       	rjmp	.+126    	; 0x1b76 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1af8:	6f 81       	ldd	r22, Y+7	; 0x07
    1afa:	78 85       	ldd	r23, Y+8	; 0x08
    1afc:	89 85       	ldd	r24, Y+9	; 0x09
    1afe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	3f ef       	ldi	r19, 0xFF	; 255
    1b04:	4f e7       	ldi	r20, 0x7F	; 127
    1b06:	57 e4       	ldi	r21, 0x47	; 71
    1b08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b0c:	18 16       	cp	r1, r24
    1b0e:	4c f5       	brge	.+82     	; 0x1b62 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e2       	ldi	r20, 0x20	; 32
    1b1e:	51 e4       	ldi	r21, 0x41	; 65
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	bc 01       	movw	r22, r24
    1b2a:	cd 01       	movw	r24, r26
    1b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	9e 83       	std	Y+6, r25	; 0x06
    1b36:	8d 83       	std	Y+5, r24	; 0x05
    1b38:	0f c0       	rjmp	.+30     	; 0x1b58 <LCD_sendCommand+0x39a>
    1b3a:	88 ec       	ldi	r24, 0xC8	; 200
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	8b 83       	std	Y+3, r24	; 0x03
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <LCD_sendCommand+0x388>
    1b4a:	9c 83       	std	Y+4, r25	; 0x04
    1b4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b50:	9e 81       	ldd	r25, Y+6	; 0x06
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	9e 83       	std	Y+6, r25	; 0x06
    1b56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	69 f7       	brne	.-38     	; 0x1b3a <LCD_sendCommand+0x37c>
    1b60:	14 c0       	rjmp	.+40     	; 0x1b8a <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b62:	6f 81       	ldd	r22, Y+7	; 0x07
    1b64:	78 85       	ldd	r23, Y+8	; 0x08
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9e 83       	std	Y+6, r25	; 0x06
    1b74:	8d 83       	std	Y+5, r24	; 0x05
    1b76:	8d 81       	ldd	r24, Y+5	; 0x05
    1b78:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7a:	9a 83       	std	Y+2, r25	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD_sendCommand+0x3c4>
    1b86:	9a 83       	std	Y+2, r25	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b8a:	e9 96       	adiw	r28, 0x39	; 57
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	cf 91       	pop	r28
    1b98:	df 91       	pop	r29
    1b9a:	08 95       	ret

00001b9c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1b9c:	df 93       	push	r29
    1b9e:	cf 93       	push	r28
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	e9 97       	sbiw	r28, 0x39	; 57
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	64 e0       	ldi	r22, 0x04	; 4
    1bb6:	41 e0       	ldi	r20, 0x01	; 1
    1bb8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e8       	ldi	r26, 0x80	; 128
    1bc2:	bf e3       	ldi	r27, 0x3F	; 63
    1bc4:	8d ab       	std	Y+53, r24	; 0x35
    1bc6:	9e ab       	std	Y+54, r25	; 0x36
    1bc8:	af ab       	std	Y+55, r26	; 0x37
    1bca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	6d a9       	ldd	r22, Y+53	; 0x35
    1bce:	7e a9       	ldd	r23, Y+54	; 0x36
    1bd0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd2:	98 ad       	ldd	r25, Y+56	; 0x38
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4a ef       	ldi	r20, 0xFA	; 250
    1bda:	54 e4       	ldi	r21, 0x44	; 68
    1bdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	89 ab       	std	Y+49, r24	; 0x31
    1be6:	9a ab       	std	Y+50, r25	; 0x32
    1be8:	ab ab       	std	Y+51, r26	; 0x33
    1bea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bec:	69 a9       	ldd	r22, Y+49	; 0x31
    1bee:	7a a9       	ldd	r23, Y+50	; 0x32
    1bf0:	8b a9       	ldd	r24, Y+51	; 0x33
    1bf2:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e8       	ldi	r20, 0x80	; 128
    1bfa:	5f e3       	ldi	r21, 0x3F	; 63
    1bfc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c00:	88 23       	and	r24, r24
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <LCD_displayCharacter+0x72>
		__ticks = 1;
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	98 ab       	std	Y+48, r25	; 0x30
    1c0a:	8f a7       	std	Y+47, r24	; 0x2f
    1c0c:	3f c0       	rjmp	.+126    	; 0x1c8c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1c0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c10:	7a a9       	ldd	r23, Y+50	; 0x32
    1c12:	8b a9       	ldd	r24, Y+51	; 0x33
    1c14:	9c a9       	ldd	r25, Y+52	; 0x34
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	3f ef       	ldi	r19, 0xFF	; 255
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	57 e4       	ldi	r21, 0x47	; 71
    1c1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	4c f5       	brge	.+82     	; 0x1c78 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c26:	6d a9       	ldd	r22, Y+53	; 0x35
    1c28:	7e a9       	ldd	r23, Y+54	; 0x36
    1c2a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c2c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e2       	ldi	r20, 0x20	; 32
    1c34:	51 e4       	ldi	r21, 0x41	; 65
    1c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	98 ab       	std	Y+48, r25	; 0x30
    1c4c:	8f a7       	std	Y+47, r24	; 0x2f
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <LCD_displayCharacter+0xd2>
    1c50:	88 ec       	ldi	r24, 0xC8	; 200
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9e a7       	std	Y+46, r25	; 0x2e
    1c56:	8d a7       	std	Y+45, r24	; 0x2d
    1c58:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c5a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <LCD_displayCharacter+0xc0>
    1c60:	9e a7       	std	Y+46, r25	; 0x2e
    1c62:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c66:	98 a9       	ldd	r25, Y+48	; 0x30
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	98 ab       	std	Y+48, r25	; 0x30
    1c6c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c70:	98 a9       	ldd	r25, Y+48	; 0x30
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f7       	brne	.-38     	; 0x1c50 <LCD_displayCharacter+0xb4>
    1c76:	14 c0       	rjmp	.+40     	; 0x1ca0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c78:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	98 ab       	std	Y+48, r25	; 0x30
    1c8a:	8f a7       	std	Y+47, r24	; 0x2f
    1c8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c90:	9c a7       	std	Y+44, r25	; 0x2c
    1c92:	8b a7       	std	Y+43, r24	; 0x2b
    1c94:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c96:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_displayCharacter+0xfc>
    1c9c:	9c a7       	std	Y+44, r25	; 0x2c
    1c9e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ca0:	83 e0       	ldi	r24, 0x03	; 3
    1ca2:	65 e0       	ldi	r22, 0x05	; 5
    1ca4:	41 e0       	ldi	r20, 0x01	; 1
    1ca6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 e8       	ldi	r26, 0x80	; 128
    1cb0:	bf e3       	ldi	r27, 0x3F	; 63
    1cb2:	8f a3       	std	Y+39, r24	; 0x27
    1cb4:	98 a7       	std	Y+40, r25	; 0x28
    1cb6:	a9 a7       	std	Y+41, r26	; 0x29
    1cb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cba:	6f a1       	ldd	r22, Y+39	; 0x27
    1cbc:	78 a5       	ldd	r23, Y+40	; 0x28
    1cbe:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	4a ef       	ldi	r20, 0xFA	; 250
    1cc8:	54 e4       	ldi	r21, 0x44	; 68
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	8b a3       	std	Y+35, r24	; 0x23
    1cd4:	9c a3       	std	Y+36, r25	; 0x24
    1cd6:	ad a3       	std	Y+37, r26	; 0x25
    1cd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cda:	6b a1       	ldd	r22, Y+35	; 0x23
    1cdc:	7c a1       	ldd	r23, Y+36	; 0x24
    1cde:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <LCD_displayCharacter+0x160>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9a a3       	std	Y+34, r25	; 0x22
    1cf8:	89 a3       	std	Y+33, r24	; 0x21
    1cfa:	3f c0       	rjmp	.+126    	; 0x1d7a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1cfc:	6b a1       	ldd	r22, Y+35	; 0x23
    1cfe:	7c a1       	ldd	r23, Y+36	; 0x24
    1d00:	8d a1       	ldd	r24, Y+37	; 0x25
    1d02:	9e a1       	ldd	r25, Y+38	; 0x26
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	3f ef       	ldi	r19, 0xFF	; 255
    1d08:	4f e7       	ldi	r20, 0x7F	; 127
    1d0a:	57 e4       	ldi	r21, 0x47	; 71
    1d0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d10:	18 16       	cp	r1, r24
    1d12:	4c f5       	brge	.+82     	; 0x1d66 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d14:	6f a1       	ldd	r22, Y+39	; 0x27
    1d16:	78 a5       	ldd	r23, Y+40	; 0x28
    1d18:	89 a5       	ldd	r24, Y+41	; 0x29
    1d1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e2       	ldi	r20, 0x20	; 32
    1d22:	51 e4       	ldi	r21, 0x41	; 65
    1d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	bc 01       	movw	r22, r24
    1d2e:	cd 01       	movw	r24, r26
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9a a3       	std	Y+34, r25	; 0x22
    1d3a:	89 a3       	std	Y+33, r24	; 0x21
    1d3c:	0f c0       	rjmp	.+30     	; 0x1d5c <LCD_displayCharacter+0x1c0>
    1d3e:	88 ec       	ldi	r24, 0xC8	; 200
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	98 a3       	std	Y+32, r25	; 0x20
    1d44:	8f 8f       	std	Y+31, r24	; 0x1f
    1d46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d48:	98 a1       	ldd	r25, Y+32	; 0x20
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_displayCharacter+0x1ae>
    1d4e:	98 a3       	std	Y+32, r25	; 0x20
    1d50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d52:	89 a1       	ldd	r24, Y+33	; 0x21
    1d54:	9a a1       	ldd	r25, Y+34	; 0x22
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	9a a3       	std	Y+34, r25	; 0x22
    1d5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	69 f7       	brne	.-38     	; 0x1d3e <LCD_displayCharacter+0x1a2>
    1d64:	14 c0       	rjmp	.+40     	; 0x1d8e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d66:	6b a1       	ldd	r22, Y+35	; 0x23
    1d68:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9a a3       	std	Y+34, r25	; 0x22
    1d78:	89 a3       	std	Y+33, r24	; 0x21
    1d7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d80:	8d 8f       	std	Y+29, r24	; 0x1d
    1d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_displayCharacter+0x1ea>
    1d8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d8c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	69 ad       	ldd	r22, Y+57	; 0x39
    1d92:	0e 94 97 09 	call	0x132e	; 0x132e <GPIO_writePort>
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	a0 e8       	ldi	r26, 0x80	; 128
    1d9c:	bf e3       	ldi	r27, 0x3F	; 63
    1d9e:	89 8f       	std	Y+25, r24	; 0x19
    1da0:	9a 8f       	std	Y+26, r25	; 0x1a
    1da2:	ab 8f       	std	Y+27, r26	; 0x1b
    1da4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da6:	69 8d       	ldd	r22, Y+25	; 0x19
    1da8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1daa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	4a ef       	ldi	r20, 0xFA	; 250
    1db4:	54 e4       	ldi	r21, 0x44	; 68
    1db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	8d 8b       	std	Y+21, r24	; 0x15
    1dc0:	9e 8b       	std	Y+22, r25	; 0x16
    1dc2:	af 8b       	std	Y+23, r26	; 0x17
    1dc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dca:	8f 89       	ldd	r24, Y+23	; 0x17
    1dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e8       	ldi	r20, 0x80	; 128
    1dd4:	5f e3       	ldi	r21, 0x3F	; 63
    1dd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dda:	88 23       	and	r24, r24
    1ddc:	2c f4       	brge	.+10     	; 0x1de8 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9c 8b       	std	Y+20, r25	; 0x14
    1de4:	8b 8b       	std	Y+19, r24	; 0x13
    1de6:	3f c0       	rjmp	.+126    	; 0x1e66 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1de8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dea:	7e 89       	ldd	r23, Y+22	; 0x16
    1dec:	8f 89       	ldd	r24, Y+23	; 0x17
    1dee:	98 8d       	ldd	r25, Y+24	; 0x18
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	3f ef       	ldi	r19, 0xFF	; 255
    1df4:	4f e7       	ldi	r20, 0x7F	; 127
    1df6:	57 e4       	ldi	r21, 0x47	; 71
    1df8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfc:	18 16       	cp	r1, r24
    1dfe:	4c f5       	brge	.+82     	; 0x1e52 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e00:	69 8d       	ldd	r22, Y+25	; 0x19
    1e02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e2       	ldi	r20, 0x20	; 32
    1e0e:	51 e4       	ldi	r21, 0x41	; 65
    1e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	bc 01       	movw	r22, r24
    1e1a:	cd 01       	movw	r24, r26
    1e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9c 8b       	std	Y+20, r25	; 0x14
    1e26:	8b 8b       	std	Y+19, r24	; 0x13
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <LCD_displayCharacter+0x2ac>
    1e2a:	88 ec       	ldi	r24, 0xC8	; 200
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	9a 8b       	std	Y+18, r25	; 0x12
    1e30:	89 8b       	std	Y+17, r24	; 0x11
    1e32:	89 89       	ldd	r24, Y+17	; 0x11
    1e34:	9a 89       	ldd	r25, Y+18	; 0x12
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <LCD_displayCharacter+0x29a>
    1e3a:	9a 8b       	std	Y+18, r25	; 0x12
    1e3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e40:	9c 89       	ldd	r25, Y+20	; 0x14
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	9c 8b       	std	Y+20, r25	; 0x14
    1e46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e48:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	69 f7       	brne	.-38     	; 0x1e2a <LCD_displayCharacter+0x28e>
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e52:	6d 89       	ldd	r22, Y+21	; 0x15
    1e54:	7e 89       	ldd	r23, Y+22	; 0x16
    1e56:	8f 89       	ldd	r24, Y+23	; 0x17
    1e58:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	9c 8b       	std	Y+20, r25	; 0x14
    1e64:	8b 8b       	std	Y+19, r24	; 0x13
    1e66:	8b 89       	ldd	r24, Y+19	; 0x13
    1e68:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6a:	98 8b       	std	Y+16, r25	; 0x10
    1e6c:	8f 87       	std	Y+15, r24	; 0x0f
    1e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e70:	98 89       	ldd	r25, Y+16	; 0x10
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_displayCharacter+0x2d6>
    1e76:	98 8b       	std	Y+16, r25	; 0x10
    1e78:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e7a:	83 e0       	ldi	r24, 0x03	; 3
    1e7c:	65 e0       	ldi	r22, 0x05	; 5
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	0e 94 cd 07 	call	0xf9a	; 0xf9a <GPIO_writePin>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a0 e8       	ldi	r26, 0x80	; 128
    1e8a:	bf e3       	ldi	r27, 0x3F	; 63
    1e8c:	8b 87       	std	Y+11, r24	; 0x0b
    1e8e:	9c 87       	std	Y+12, r25	; 0x0c
    1e90:	ad 87       	std	Y+13, r26	; 0x0d
    1e92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a ef       	ldi	r20, 0xFA	; 250
    1ea2:	54 e4       	ldi	r21, 0x44	; 68
    1ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8f 83       	std	Y+7, r24	; 0x07
    1eae:	98 87       	std	Y+8, r25	; 0x08
    1eb0:	a9 87       	std	Y+9, r26	; 0x09
    1eb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb6:	78 85       	ldd	r23, Y+8	; 0x08
    1eb8:	89 85       	ldd	r24, Y+9	; 0x09
    1eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9e 83       	std	Y+6, r25	; 0x06
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	3f c0       	rjmp	.+126    	; 0x1f54 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	3f ef       	ldi	r19, 0xFF	; 255
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	57 e4       	ldi	r21, 0x47	; 71
    1ee6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eea:	18 16       	cp	r1, r24
    1eec:	4c f5       	brge	.+82     	; 0x1f40 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e2       	ldi	r20, 0x20	; 32
    1efc:	51 e4       	ldi	r21, 0x41	; 65
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	bc 01       	movw	r22, r24
    1f08:	cd 01       	movw	r24, r26
    1f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	0f c0       	rjmp	.+30     	; 0x1f36 <LCD_displayCharacter+0x39a>
    1f18:	88 ec       	ldi	r24, 0xC8	; 200
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <LCD_displayCharacter+0x388>
    1f28:	9c 83       	std	Y+4, r25	; 0x04
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	69 f7       	brne	.-38     	; 0x1f18 <LCD_displayCharacter+0x37c>
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f40:	6f 81       	ldd	r22, Y+7	; 0x07
    1f42:	78 85       	ldd	r23, Y+8	; 0x08
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <LCD_displayCharacter+0x3c4>
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f68:	e9 96       	adiw	r28, 0x39	; 57
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <LCD_displayString+0x6>
    1f80:	0f 92       	push	r0
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	9b 83       	std	Y+3, r25	; 0x03
    1f88:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f8a:	19 82       	std	Y+1, r1	; 0x01
    1f8c:	0e c0       	rjmp	.+28     	; 0x1faa <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	9b 81       	ldd	r25, Y+3	; 0x03
    1f98:	fc 01       	movw	r30, r24
    1f9a:	e2 0f       	add	r30, r18
    1f9c:	f3 1f       	adc	r31, r19
    1f9e:	80 81       	ld	r24, Z
    1fa0:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <LCD_displayCharacter>
		i++;
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	8f 5f       	subi	r24, 0xFF	; 255
    1fa8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	e2 0f       	add	r30, r18
    1fb8:	f3 1f       	adc	r31, r19
    1fba:	80 81       	ld	r24, Z
    1fbc:	88 23       	and	r24, r24
    1fbe:	39 f7       	brne	.-50     	; 0x1f8e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <LCD_moveCursor+0x6>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <LCD_moveCursor+0x8>
    1fd4:	0f 92       	push	r0
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	8a 83       	std	Y+2, r24	; 0x02
    1fdc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	3d 83       	std	Y+5, r19	; 0x05
    1fe6:	2c 83       	std	Y+4, r18	; 0x04
    1fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fea:	9d 81       	ldd	r25, Y+5	; 0x05
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	91 05       	cpc	r25, r1
    1ff0:	c1 f0       	breq	.+48     	; 0x2022 <LCD_moveCursor+0x56>
    1ff2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff6:	22 30       	cpi	r18, 0x02	; 2
    1ff8:	31 05       	cpc	r19, r1
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <LCD_moveCursor+0x3a>
    1ffc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	61 f0       	breq	.+24     	; 0x201c <LCD_moveCursor+0x50>
    2004:	19 c0       	rjmp	.+50     	; 0x2038 <LCD_moveCursor+0x6c>
    2006:	2c 81       	ldd	r18, Y+4	; 0x04
    2008:	3d 81       	ldd	r19, Y+5	; 0x05
    200a:	22 30       	cpi	r18, 0x02	; 2
    200c:	31 05       	cpc	r19, r1
    200e:	69 f0       	breq	.+26     	; 0x202a <LCD_moveCursor+0x5e>
    2010:	8c 81       	ldd	r24, Y+4	; 0x04
    2012:	9d 81       	ldd	r25, Y+5	; 0x05
    2014:	83 30       	cpi	r24, 0x03	; 3
    2016:	91 05       	cpc	r25, r1
    2018:	61 f0       	breq	.+24     	; 0x2032 <LCD_moveCursor+0x66>
    201a:	0e c0       	rjmp	.+28     	; 0x2038 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	0b c0       	rjmp	.+22     	; 0x2038 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	80 5c       	subi	r24, 0xC0	; 192
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	07 c0       	rjmp	.+14     	; 0x2038 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	80 5f       	subi	r24, 0xF0	; 240
    202e:	89 83       	std	Y+1, r24	; 0x01
    2030:	03 c0       	rjmp	.+6      	; 0x2038 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	80 5b       	subi	r24, 0xB0	; 176
    2036:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	80 68       	ori	r24, 0x80	; 128
    203c:	0e 94 df 0b 	call	0x17be	; 0x17be <LCD_sendCommand>
}
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	00 d0       	rcall	.+0      	; 0x2056 <LCD_displayStringRowColumn+0x6>
    2056:	00 d0       	rcall	.+0      	; 0x2058 <LCD_displayStringRowColumn+0x8>
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	89 83       	std	Y+1, r24	; 0x01
    205e:	6a 83       	std	Y+2, r22	; 0x02
    2060:	5c 83       	std	Y+4, r21	; 0x04
    2062:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	6a 81       	ldd	r22, Y+2	; 0x02
    2068:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayString>
}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	08 95       	ret

00002082 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2082:	df 93       	push	r29
    2084:	cf 93       	push	r28
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	62 97       	sbiw	r28, 0x12	; 18
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	9a 8b       	std	Y+18, r25	; 0x12
    2098:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    209a:	89 89       	ldd	r24, Y+17	; 0x11
    209c:	9a 89       	ldd	r25, Y+18	; 0x12
    209e:	9e 01       	movw	r18, r28
    20a0:	2f 5f       	subi	r18, 0xFF	; 255
    20a2:	3f 4f       	sbci	r19, 0xFF	; 255
    20a4:	b9 01       	movw	r22, r18
    20a6:	4a e0       	ldi	r20, 0x0A	; 10
    20a8:	50 e0       	ldi	r21, 0x00	; 0
    20aa:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <itoa>
   LCD_displayString(buff); /* Display the string */
    20ae:	ce 01       	movw	r24, r28
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayString>
}
    20b6:	62 96       	adiw	r28, 0x12	; 18
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	0e 94 df 0b 	call	0x17be	; 0x17be <LCD_sendCommand>
}
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <timerTick>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void timerTick()
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    20e4:	80 91 e1 00 	lds	r24, 0x00E1
    20e8:	8f 5f       	subi	r24, 0xFF	; 255
    20ea:	80 93 e1 00 	sts	0x00E1, r24
}
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	08 95       	ret

000020f4 <newPass>:



void newPass()
{
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	c5 5a       	subi	r28, 0xA5	; 165
    2102:	d0 40       	sbci	r29, 0x00	; 0
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	LCD_clearScreen();
    210e:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_clearScreen>
	LCD_displayString("Enter new pass:");
    2112:	80 e6       	ldi	r24, 0x60	; 96
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayString>
	LCD_moveCursor(1,0);
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <LCD_moveCursor>
	for(i=0;i<5;i++)
    2122:	fe 01       	movw	r30, r28
    2124:	eb 55       	subi	r30, 0x5B	; 91
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	10 82       	st	Z, r1
    212a:	7f c1       	rjmp	.+766    	; 0x242a <newPass+0x336>
	{
		pass[i]=KEYPAD_getPressedKey()+48;
    212c:	fe 01       	movw	r30, r28
    212e:	eb 55       	subi	r30, 0x5B	; 91
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	08 2f       	mov	r16, r24
    2136:	10 e0       	ldi	r17, 0x00	; 0
    2138:	0e 94 20 0a 	call	0x1440	; 0x1440 <KEYPAD_getPressedKey>
    213c:	80 5d       	subi	r24, 0xD0	; 208
    213e:	f8 01       	movw	r30, r16
    2140:	e6 52       	subi	r30, 0x26	; 38
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 83       	st	Z, r24
    2146:	fe 01       	movw	r30, r28
    2148:	ef 55       	subi	r30, 0x5F	; 95
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a8 ec       	ldi	r26, 0xC8	; 200
    2152:	b2 e4       	ldi	r27, 0x42	; 66
    2154:	80 83       	st	Z, r24
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	a2 83       	std	Z+2, r26	; 0x02
    215a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	8e 01       	movw	r16, r28
    215e:	03 56       	subi	r16, 0x63	; 99
    2160:	1f 4f       	sbci	r17, 0xFF	; 255
    2162:	fe 01       	movw	r30, r28
    2164:	ef 55       	subi	r30, 0x5F	; 95
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	82 81       	ldd	r24, Z+2	; 0x02
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	4a ef       	ldi	r20, 0xFA	; 250
    2176:	54 e4       	ldi	r21, 0x44	; 68
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	f8 01       	movw	r30, r16
    2182:	80 83       	st	Z, r24
    2184:	91 83       	std	Z+1, r25	; 0x01
    2186:	a2 83       	std	Z+2, r26	; 0x02
    2188:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    218a:	fe 01       	movw	r30, r28
    218c:	e3 56       	subi	r30, 0x63	; 99
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	44 f4       	brge	.+16     	; 0x21b8 <newPass+0xc4>
		__ticks = 1;
    21a8:	fe 01       	movw	r30, r28
    21aa:	e5 56       	subi	r30, 0x65	; 101
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	80 83       	st	Z, r24
    21b6:	64 c0       	rjmp	.+200    	; 0x2280 <newPass+0x18c>
	else if (__tmp > 65535)
    21b8:	fe 01       	movw	r30, r28
    21ba:	e3 56       	subi	r30, 0x63	; 99
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	60 81       	ld	r22, Z
    21c0:	71 81       	ldd	r23, Z+1	; 0x01
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	0c f0       	brlt	.+2      	; 0x21d8 <newPass+0xe4>
    21d6:	43 c0       	rjmp	.+134    	; 0x225e <newPass+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d8:	fe 01       	movw	r30, r28
    21da:	ef 55       	subi	r30, 0x5F	; 95
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	60 81       	ld	r22, Z
    21e0:	71 81       	ldd	r23, Z+1	; 0x01
    21e2:	82 81       	ldd	r24, Z+2	; 0x02
    21e4:	93 81       	ldd	r25, Z+3	; 0x03
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	8e 01       	movw	r16, r28
    21f8:	05 56       	subi	r16, 0x65	; 101
    21fa:	1f 4f       	sbci	r17, 0xFF	; 255
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	f8 01       	movw	r30, r16
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
    220e:	1f c0       	rjmp	.+62     	; 0x224e <newPass+0x15a>
    2210:	fe 01       	movw	r30, r28
    2212:	e7 56       	subi	r30, 0x67	; 103
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	88 ec       	ldi	r24, 0xC8	; 200
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
    221e:	fe 01       	movw	r30, r28
    2220:	e7 56       	subi	r30, 0x67	; 103
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <newPass+0x134>
    222c:	fe 01       	movw	r30, r28
    222e:	e7 56       	subi	r30, 0x67	; 103
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2236:	de 01       	movw	r26, r28
    2238:	a5 56       	subi	r26, 0x65	; 101
    223a:	bf 4f       	sbci	r27, 0xFF	; 255
    223c:	fe 01       	movw	r30, r28
    223e:	e5 56       	subi	r30, 0x65	; 101
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	11 96       	adiw	r26, 0x01	; 1
    224a:	9c 93       	st	X, r25
    224c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	fe 01       	movw	r30, r28
    2250:	e5 56       	subi	r30, 0x65	; 101
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	d1 f6       	brne	.-76     	; 0x2210 <newPass+0x11c>
    225c:	27 c0       	rjmp	.+78     	; 0x22ac <newPass+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	8e 01       	movw	r16, r28
    2260:	05 56       	subi	r16, 0x65	; 101
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	fe 01       	movw	r30, r28
    2266:	e3 56       	subi	r30, 0x63	; 99
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	f8 01       	movw	r30, r16
    227c:	91 83       	std	Z+1, r25	; 0x01
    227e:	80 83       	st	Z, r24
    2280:	de 01       	movw	r26, r28
    2282:	a9 56       	subi	r26, 0x69	; 105
    2284:	bf 4f       	sbci	r27, 0xFF	; 255
    2286:	fe 01       	movw	r30, r28
    2288:	e5 56       	subi	r30, 0x65	; 101
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	8d 93       	st	X+, r24
    2292:	9c 93       	st	X, r25
    2294:	fe 01       	movw	r30, r28
    2296:	e9 56       	subi	r30, 0x69	; 105
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <newPass+0x1aa>
    22a2:	fe 01       	movw	r30, r28
    22a4:	e9 56       	subi	r30, 0x69	; 105
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
		_delay_ms(100);
		LCD_displayCharacter('*');
    22ac:	8a e2       	ldi	r24, 0x2A	; 42
    22ae:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <LCD_displayCharacter>
    22b2:	fe 01       	movw	r30, r28
    22b4:	ed 56       	subi	r30, 0x6D	; 109
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a8 ec       	ldi	r26, 0xC8	; 200
    22be:	b2 e4       	ldi	r27, 0x42	; 66
    22c0:	80 83       	st	Z, r24
    22c2:	91 83       	std	Z+1, r25	; 0x01
    22c4:	a2 83       	std	Z+2, r26	; 0x02
    22c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	8e 01       	movw	r16, r28
    22ca:	01 57       	subi	r16, 0x71	; 113
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
    22ce:	fe 01       	movw	r30, r28
    22d0:	ed 56       	subi	r30, 0x6D	; 109
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	60 81       	ld	r22, Z
    22d6:	71 81       	ldd	r23, Z+1	; 0x01
    22d8:	82 81       	ldd	r24, Z+2	; 0x02
    22da:	93 81       	ldd	r25, Z+3	; 0x03
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	4a ef       	ldi	r20, 0xFA	; 250
    22e2:	54 e4       	ldi	r21, 0x44	; 68
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	f8 01       	movw	r30, r16
    22ee:	80 83       	st	Z, r24
    22f0:	91 83       	std	Z+1, r25	; 0x01
    22f2:	a2 83       	std	Z+2, r26	; 0x02
    22f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22f6:	fe 01       	movw	r30, r28
    22f8:	e1 57       	subi	r30, 0x71	; 113
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	44 f4       	brge	.+16     	; 0x2324 <newPass+0x230>
		__ticks = 1;
    2314:	fe 01       	movw	r30, r28
    2316:	e3 57       	subi	r30, 0x73	; 115
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	80 83       	st	Z, r24
    2322:	64 c0       	rjmp	.+200    	; 0x23ec <newPass+0x2f8>
	else if (__tmp > 65535)
    2324:	fe 01       	movw	r30, r28
    2326:	e1 57       	subi	r30, 0x71	; 113
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	60 81       	ld	r22, Z
    232c:	71 81       	ldd	r23, Z+1	; 0x01
    232e:	82 81       	ldd	r24, Z+2	; 0x02
    2330:	93 81       	ldd	r25, Z+3	; 0x03
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	0c f0       	brlt	.+2      	; 0x2344 <newPass+0x250>
    2342:	43 c0       	rjmp	.+134    	; 0x23ca <newPass+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2344:	fe 01       	movw	r30, r28
    2346:	ed 56       	subi	r30, 0x6D	; 109
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	60 81       	ld	r22, Z
    234c:	71 81       	ldd	r23, Z+1	; 0x01
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e2       	ldi	r20, 0x20	; 32
    2358:	51 e4       	ldi	r21, 0x41	; 65
    235a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	8e 01       	movw	r16, r28
    2364:	03 57       	subi	r16, 0x73	; 115
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	bc 01       	movw	r22, r24
    236a:	cd 01       	movw	r24, r26
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	f8 01       	movw	r30, r16
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	80 83       	st	Z, r24
    237a:	1f c0       	rjmp	.+62     	; 0x23ba <newPass+0x2c6>
    237c:	fe 01       	movw	r30, r28
    237e:	e5 57       	subi	r30, 0x75	; 117
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	88 ec       	ldi	r24, 0xC8	; 200
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	91 83       	std	Z+1, r25	; 0x01
    2388:	80 83       	st	Z, r24
    238a:	fe 01       	movw	r30, r28
    238c:	e5 57       	subi	r30, 0x75	; 117
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 81       	ld	r24, Z
    2392:	91 81       	ldd	r25, Z+1	; 0x01
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <newPass+0x2a0>
    2398:	fe 01       	movw	r30, r28
    239a:	e5 57       	subi	r30, 0x75	; 117
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	de 01       	movw	r26, r28
    23a4:	a3 57       	subi	r26, 0x73	; 115
    23a6:	bf 4f       	sbci	r27, 0xFF	; 255
    23a8:	fe 01       	movw	r30, r28
    23aa:	e3 57       	subi	r30, 0x73	; 115
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 81       	ld	r24, Z
    23b0:	91 81       	ldd	r25, Z+1	; 0x01
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	11 96       	adiw	r26, 0x01	; 1
    23b6:	9c 93       	st	X, r25
    23b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ba:	fe 01       	movw	r30, r28
    23bc:	e3 57       	subi	r30, 0x73	; 115
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	80 81       	ld	r24, Z
    23c2:	91 81       	ldd	r25, Z+1	; 0x01
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	d1 f6       	brne	.-76     	; 0x237c <newPass+0x288>
    23c8:	27 c0       	rjmp	.+78     	; 0x2418 <newPass+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ca:	8e 01       	movw	r16, r28
    23cc:	03 57       	subi	r16, 0x73	; 115
    23ce:	1f 4f       	sbci	r17, 0xFF	; 255
    23d0:	fe 01       	movw	r30, r28
    23d2:	e1 57       	subi	r30, 0x71	; 113
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	f8 01       	movw	r30, r16
    23e8:	91 83       	std	Z+1, r25	; 0x01
    23ea:	80 83       	st	Z, r24
    23ec:	de 01       	movw	r26, r28
    23ee:	a7 57       	subi	r26, 0x77	; 119
    23f0:	bf 4f       	sbci	r27, 0xFF	; 255
    23f2:	fe 01       	movw	r30, r28
    23f4:	e3 57       	subi	r30, 0x73	; 115
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	91 81       	ldd	r25, Z+1	; 0x01
    23fc:	8d 93       	st	X+, r24
    23fe:	9c 93       	st	X, r25
    2400:	fe 01       	movw	r30, r28
    2402:	e7 57       	subi	r30, 0x77	; 119
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	01 97       	sbiw	r24, 0x01	; 1
    240c:	f1 f7       	brne	.-4      	; 0x240a <newPass+0x316>
    240e:	fe 01       	movw	r30, r28
    2410:	e7 57       	subi	r30, 0x77	; 119
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	91 83       	std	Z+1, r25	; 0x01
    2416:	80 83       	st	Z, r24
{
	uint8 i;
	LCD_clearScreen();
	LCD_displayString("Enter new pass:");
	LCD_moveCursor(1,0);
	for(i=0;i<5;i++)
    2418:	de 01       	movw	r26, r28
    241a:	ab 55       	subi	r26, 0x5B	; 91
    241c:	bf 4f       	sbci	r27, 0xFF	; 255
    241e:	fe 01       	movw	r30, r28
    2420:	eb 55       	subi	r30, 0x5B	; 91
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 81       	ld	r24, Z
    2426:	8f 5f       	subi	r24, 0xFF	; 255
    2428:	8c 93       	st	X, r24
    242a:	fe 01       	movw	r30, r28
    242c:	eb 55       	subi	r30, 0x5B	; 91
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	80 81       	ld	r24, Z
    2432:	85 30       	cpi	r24, 0x05	; 5
    2434:	08 f4       	brcc	.+2      	; 0x2438 <newPass+0x344>
    2436:	7a ce       	rjmp	.-780    	; 0x212c <newPass+0x38>
    2438:	fe 01       	movw	r30, r28
    243a:	eb 57       	subi	r30, 0x7B	; 123
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	a8 ec       	ldi	r26, 0xC8	; 200
    2444:	b2 e4       	ldi	r27, 0x42	; 66
    2446:	80 83       	st	Z, r24
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	a2 83       	std	Z+2, r26	; 0x02
    244c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    244e:	8e 01       	movw	r16, r28
    2450:	0f 57       	subi	r16, 0x7F	; 127
    2452:	1f 4f       	sbci	r17, 0xFF	; 255
    2454:	fe 01       	movw	r30, r28
    2456:	eb 57       	subi	r30, 0x7B	; 123
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a ef       	ldi	r20, 0xFA	; 250
    2468:	54 e4       	ldi	r21, 0x44	; 68
    246a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	f8 01       	movw	r30, r16
    2474:	80 83       	st	Z, r24
    2476:	91 83       	std	Z+1, r25	; 0x01
    2478:	a2 83       	std	Z+2, r26	; 0x02
    247a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    247c:	fe 01       	movw	r30, r28
    247e:	ef 57       	subi	r30, 0x7F	; 127
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	44 f4       	brge	.+16     	; 0x24aa <newPass+0x3b6>
		__ticks = 1;
    249a:	fe 01       	movw	r30, r28
    249c:	e1 58       	subi	r30, 0x81	; 129
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	91 83       	std	Z+1, r25	; 0x01
    24a6:	80 83       	st	Z, r24
    24a8:	64 c0       	rjmp	.+200    	; 0x2572 <newPass+0x47e>
	else if (__tmp > 65535)
    24aa:	fe 01       	movw	r30, r28
    24ac:	ef 57       	subi	r30, 0x7F	; 127
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	60 81       	ld	r22, Z
    24b2:	71 81       	ldd	r23, Z+1	; 0x01
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	3f ef       	ldi	r19, 0xFF	; 255
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	57 e4       	ldi	r21, 0x47	; 71
    24c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	0c f0       	brlt	.+2      	; 0x24ca <newPass+0x3d6>
    24c8:	43 c0       	rjmp	.+134    	; 0x2550 <newPass+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ca:	fe 01       	movw	r30, r28
    24cc:	eb 57       	subi	r30, 0x7B	; 123
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	60 81       	ld	r22, Z
    24d2:	71 81       	ldd	r23, Z+1	; 0x01
    24d4:	82 81       	ldd	r24, Z+2	; 0x02
    24d6:	93 81       	ldd	r25, Z+3	; 0x03
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e2       	ldi	r20, 0x20	; 32
    24de:	51 e4       	ldi	r21, 0x41	; 65
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	8e 01       	movw	r16, r28
    24ea:	01 58       	subi	r16, 0x81	; 129
    24ec:	1f 4f       	sbci	r17, 0xFF	; 255
    24ee:	bc 01       	movw	r22, r24
    24f0:	cd 01       	movw	r24, r26
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	f8 01       	movw	r30, r16
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	1f c0       	rjmp	.+62     	; 0x2540 <newPass+0x44c>
    2502:	fe 01       	movw	r30, r28
    2504:	e3 58       	subi	r30, 0x83	; 131
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	88 ec       	ldi	r24, 0xC8	; 200
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
    2510:	fe 01       	movw	r30, r28
    2512:	e3 58       	subi	r30, 0x83	; 131
    2514:	ff 4f       	sbci	r31, 0xFF	; 255
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <newPass+0x426>
    251e:	fe 01       	movw	r30, r28
    2520:	e3 58       	subi	r30, 0x83	; 131
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2528:	de 01       	movw	r26, r28
    252a:	a1 58       	subi	r26, 0x81	; 129
    252c:	bf 4f       	sbci	r27, 0xFF	; 255
    252e:	fe 01       	movw	r30, r28
    2530:	e1 58       	subi	r30, 0x81	; 129
    2532:	ff 4f       	sbci	r31, 0xFF	; 255
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	11 96       	adiw	r26, 0x01	; 1
    253c:	9c 93       	st	X, r25
    253e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2540:	fe 01       	movw	r30, r28
    2542:	e1 58       	subi	r30, 0x81	; 129
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	80 81       	ld	r24, Z
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	d1 f6       	brne	.-76     	; 0x2502 <newPass+0x40e>
    254e:	27 c0       	rjmp	.+78     	; 0x259e <newPass+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2550:	8e 01       	movw	r16, r28
    2552:	01 58       	subi	r16, 0x81	; 129
    2554:	1f 4f       	sbci	r17, 0xFF	; 255
    2556:	fe 01       	movw	r30, r28
    2558:	ef 57       	subi	r30, 0x7F	; 127
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	60 81       	ld	r22, Z
    255e:	71 81       	ldd	r23, Z+1	; 0x01
    2560:	82 81       	ldd	r24, Z+2	; 0x02
    2562:	93 81       	ldd	r25, Z+3	; 0x03
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	f8 01       	movw	r30, r16
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	80 83       	st	Z, r24
    2572:	de 01       	movw	r26, r28
    2574:	a5 58       	subi	r26, 0x85	; 133
    2576:	bf 4f       	sbci	r27, 0xFF	; 255
    2578:	fe 01       	movw	r30, r28
    257a:	e1 58       	subi	r30, 0x81	; 129
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	91 81       	ldd	r25, Z+1	; 0x01
    2582:	8d 93       	st	X+, r24
    2584:	9c 93       	st	X, r25
    2586:	fe 01       	movw	r30, r28
    2588:	e5 58       	subi	r30, 0x85	; 133
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <newPass+0x49c>
    2594:	fe 01       	movw	r30, r28
    2596:	e5 58       	subi	r30, 0x85	; 133
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	80 83       	st	Z, r24
		_delay_ms(100);


	}
	_delay_ms(100);
	while(KEYPAD_getPressedKey()!='=')
    259e:	0e 94 20 0a 	call	0x1440	; 0x1440 <KEYPAD_getPressedKey>
    25a2:	8d 33       	cpi	r24, 0x3D	; 61
    25a4:	e1 f7       	brne	.-8      	; 0x259e <newPass+0x4aa>
	{
	}
	pass[i]='=';
    25a6:	fe 01       	movw	r30, r28
    25a8:	eb 55       	subi	r30, 0x5B	; 91
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 81       	ld	r24, Z
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	fc 01       	movw	r30, r24
    25b4:	e6 52       	subi	r30, 0x26	; 38
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	8d e3       	ldi	r24, 0x3D	; 61
    25ba:	80 83       	st	Z, r24
    25bc:	fe 01       	movw	r30, r28
    25be:	e9 58       	subi	r30, 0x89	; 137
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	a8 e4       	ldi	r26, 0x48	; 72
    25c8:	b2 e4       	ldi	r27, 0x42	; 66
    25ca:	80 83       	st	Z, r24
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	a2 83       	std	Z+2, r26	; 0x02
    25d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d2:	8e 01       	movw	r16, r28
    25d4:	0d 58       	subi	r16, 0x8D	; 141
    25d6:	1f 4f       	sbci	r17, 0xFF	; 255
    25d8:	fe 01       	movw	r30, r28
    25da:	e9 58       	subi	r30, 0x89	; 137
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	60 81       	ld	r22, Z
    25e0:	71 81       	ldd	r23, Z+1	; 0x01
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	4a ef       	ldi	r20, 0xFA	; 250
    25ec:	54 e4       	ldi	r21, 0x44	; 68
    25ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	f8 01       	movw	r30, r16
    25f8:	80 83       	st	Z, r24
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	a2 83       	std	Z+2, r26	; 0x02
    25fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2600:	fe 01       	movw	r30, r28
    2602:	ed 58       	subi	r30, 0x8D	; 141
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	44 f4       	brge	.+16     	; 0x262e <newPass+0x53a>
		__ticks = 1;
    261e:	fe 01       	movw	r30, r28
    2620:	ef 58       	subi	r30, 0x8F	; 143
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
    262c:	64 c0       	rjmp	.+200    	; 0x26f6 <newPass+0x602>
	else if (__tmp > 65535)
    262e:	fe 01       	movw	r30, r28
    2630:	ed 58       	subi	r30, 0x8D	; 141
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	60 81       	ld	r22, Z
    2636:	71 81       	ldd	r23, Z+1	; 0x01
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	3f ef       	ldi	r19, 0xFF	; 255
    2640:	4f e7       	ldi	r20, 0x7F	; 127
    2642:	57 e4       	ldi	r21, 0x47	; 71
    2644:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2648:	18 16       	cp	r1, r24
    264a:	0c f0       	brlt	.+2      	; 0x264e <newPass+0x55a>
    264c:	43 c0       	rjmp	.+134    	; 0x26d4 <newPass+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264e:	fe 01       	movw	r30, r28
    2650:	e9 58       	subi	r30, 0x89	; 137
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e2       	ldi	r20, 0x20	; 32
    2662:	51 e4       	ldi	r21, 0x41	; 65
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	8e 01       	movw	r16, r28
    266e:	0f 58       	subi	r16, 0x8F	; 143
    2670:	1f 4f       	sbci	r17, 0xFF	; 255
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267a:	dc 01       	movw	r26, r24
    267c:	cb 01       	movw	r24, r22
    267e:	f8 01       	movw	r30, r16
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	80 83       	st	Z, r24
    2684:	1f c0       	rjmp	.+62     	; 0x26c4 <newPass+0x5d0>
    2686:	fe 01       	movw	r30, r28
    2688:	e1 59       	subi	r30, 0x91	; 145
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	88 ec       	ldi	r24, 0xC8	; 200
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	91 83       	std	Z+1, r25	; 0x01
    2692:	80 83       	st	Z, r24
    2694:	fe 01       	movw	r30, r28
    2696:	e1 59       	subi	r30, 0x91	; 145
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	80 81       	ld	r24, Z
    269c:	91 81       	ldd	r25, Z+1	; 0x01
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <newPass+0x5aa>
    26a2:	fe 01       	movw	r30, r28
    26a4:	e1 59       	subi	r30, 0x91	; 145
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	91 83       	std	Z+1, r25	; 0x01
    26aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	de 01       	movw	r26, r28
    26ae:	af 58       	subi	r26, 0x8F	; 143
    26b0:	bf 4f       	sbci	r27, 0xFF	; 255
    26b2:	fe 01       	movw	r30, r28
    26b4:	ef 58       	subi	r30, 0x8F	; 143
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 81       	ld	r24, Z
    26ba:	91 81       	ldd	r25, Z+1	; 0x01
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	11 96       	adiw	r26, 0x01	; 1
    26c0:	9c 93       	st	X, r25
    26c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	fe 01       	movw	r30, r28
    26c6:	ef 58       	subi	r30, 0x8F	; 143
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	d1 f6       	brne	.-76     	; 0x2686 <newPass+0x592>
    26d2:	27 c0       	rjmp	.+78     	; 0x2722 <newPass+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d4:	8e 01       	movw	r16, r28
    26d6:	0f 58       	subi	r16, 0x8F	; 143
    26d8:	1f 4f       	sbci	r17, 0xFF	; 255
    26da:	fe 01       	movw	r30, r28
    26dc:	ed 58       	subi	r30, 0x8D	; 141
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	60 81       	ld	r22, Z
    26e2:	71 81       	ldd	r23, Z+1	; 0x01
    26e4:	82 81       	ldd	r24, Z+2	; 0x02
    26e6:	93 81       	ldd	r25, Z+3	; 0x03
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	f8 01       	movw	r30, r16
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24
    26f6:	de 01       	movw	r26, r28
    26f8:	a3 59       	subi	r26, 0x93	; 147
    26fa:	bf 4f       	sbci	r27, 0xFF	; 255
    26fc:	fe 01       	movw	r30, r28
    26fe:	ef 58       	subi	r30, 0x8F	; 143
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	91 81       	ldd	r25, Z+1	; 0x01
    2706:	8d 93       	st	X+, r24
    2708:	9c 93       	st	X, r25
    270a:	fe 01       	movw	r30, r28
    270c:	e3 59       	subi	r30, 0x93	; 147
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <newPass+0x620>
    2718:	fe 01       	movw	r30, r28
    271a:	e3 59       	subi	r30, 0x93	; 147
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	80 83       	st	Z, r24
	_delay_ms(50);
	UART_sendByte(receivenewPassw);
    2722:	8a e0       	ldi	r24, 0x0A	; 10
    2724:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <UART_sendByte>
    2728:	fe 01       	movw	r30, r28
    272a:	e7 59       	subi	r30, 0x97	; 151
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	a8 e4       	ldi	r26, 0x48	; 72
    2734:	b2 e4       	ldi	r27, 0x42	; 66
    2736:	80 83       	st	Z, r24
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	a2 83       	std	Z+2, r26	; 0x02
    273c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    273e:	8e 01       	movw	r16, r28
    2740:	0b 59       	subi	r16, 0x9B	; 155
    2742:	1f 4f       	sbci	r17, 0xFF	; 255
    2744:	fe 01       	movw	r30, r28
    2746:	e7 59       	subi	r30, 0x97	; 151
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	60 81       	ld	r22, Z
    274c:	71 81       	ldd	r23, Z+1	; 0x01
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	93 81       	ldd	r25, Z+3	; 0x03
    2752:	2b ea       	ldi	r18, 0xAB	; 171
    2754:	3a ea       	ldi	r19, 0xAA	; 170
    2756:	4a e2       	ldi	r20, 0x2A	; 42
    2758:	50 e4       	ldi	r21, 0x40	; 64
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	f8 01       	movw	r30, r16
    2764:	80 83       	st	Z, r24
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	a2 83       	std	Z+2, r26	; 0x02
    276a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    276c:	fe 01       	movw	r30, r28
    276e:	eb 59       	subi	r30, 0x9B	; 155
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	60 81       	ld	r22, Z
    2774:	71 81       	ldd	r23, Z+1	; 0x01
    2776:	82 81       	ldd	r24, Z+2	; 0x02
    2778:	93 81       	ldd	r25, Z+3	; 0x03
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e8       	ldi	r20, 0x80	; 128
    2780:	5f e3       	ldi	r21, 0x3F	; 63
    2782:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2786:	88 23       	and	r24, r24
    2788:	34 f4       	brge	.+12     	; 0x2796 <newPass+0x6a2>
		__ticks = 1;
    278a:	fe 01       	movw	r30, r28
    278c:	ec 59       	subi	r30, 0x9C	; 156
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	80 83       	st	Z, r24
    2794:	e0 c0       	rjmp	.+448    	; 0x2956 <newPass+0x862>
	else if (__tmp > 255)
    2796:	fe 01       	movw	r30, r28
    2798:	eb 59       	subi	r30, 0x9B	; 155
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	60 81       	ld	r22, Z
    279e:	71 81       	ldd	r23, Z+1	; 0x01
    27a0:	82 81       	ldd	r24, Z+2	; 0x02
    27a2:	93 81       	ldd	r25, Z+3	; 0x03
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	4f e7       	ldi	r20, 0x7F	; 127
    27aa:	53 e4       	ldi	r21, 0x43	; 67
    27ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27b0:	18 16       	cp	r1, r24
    27b2:	0c f0       	brlt	.+2      	; 0x27b6 <newPass+0x6c2>
    27b4:	c0 c0       	rjmp	.+384    	; 0x2936 <newPass+0x842>
	{
		_delay_ms(__us / 1000.0);
    27b6:	fe 01       	movw	r30, r28
    27b8:	e7 59       	subi	r30, 0x97	; 151
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	60 81       	ld	r22, Z
    27be:	71 81       	ldd	r23, Z+1	; 0x01
    27c0:	82 81       	ldd	r24, Z+2	; 0x02
    27c2:	93 81       	ldd	r25, Z+3	; 0x03
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	4a e7       	ldi	r20, 0x7A	; 122
    27ca:	54 e4       	ldi	r21, 0x44	; 68
    27cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	fe 01       	movw	r30, r28
    27d6:	e0 5a       	subi	r30, 0xA0	; 160
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 83       	st	Z, r24
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	a2 83       	std	Z+2, r26	; 0x02
    27e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e2:	8e 01       	movw	r16, r28
    27e4:	04 5a       	subi	r16, 0xA4	; 164
    27e6:	1f 4f       	sbci	r17, 0xFF	; 255
    27e8:	fe 01       	movw	r30, r28
    27ea:	e0 5a       	subi	r30, 0xA0	; 160
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	4a ef       	ldi	r20, 0xFA	; 250
    27fc:	54 e4       	ldi	r21, 0x44	; 68
    27fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	f8 01       	movw	r30, r16
    2808:	80 83       	st	Z, r24
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	a2 83       	std	Z+2, r26	; 0x02
    280e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2810:	fe 01       	movw	r30, r28
    2812:	e4 5a       	subi	r30, 0xA4	; 164
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e8       	ldi	r20, 0x80	; 128
    2824:	5f e3       	ldi	r21, 0x3F	; 63
    2826:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    282a:	88 23       	and	r24, r24
    282c:	44 f4       	brge	.+16     	; 0x283e <newPass+0x74a>
		__ticks = 1;
    282e:	fe 01       	movw	r30, r28
    2830:	e6 5a       	subi	r30, 0xA6	; 166
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	91 83       	std	Z+1, r25	; 0x01
    283a:	80 83       	st	Z, r24
    283c:	64 c0       	rjmp	.+200    	; 0x2906 <newPass+0x812>
	else if (__tmp > 65535)
    283e:	fe 01       	movw	r30, r28
    2840:	e4 5a       	subi	r30, 0xA4	; 164
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	60 81       	ld	r22, Z
    2846:	71 81       	ldd	r23, Z+1	; 0x01
    2848:	82 81       	ldd	r24, Z+2	; 0x02
    284a:	93 81       	ldd	r25, Z+3	; 0x03
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	57 e4       	ldi	r21, 0x47	; 71
    2854:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	0c f0       	brlt	.+2      	; 0x285e <newPass+0x76a>
    285c:	43 c0       	rjmp	.+134    	; 0x28e4 <newPass+0x7f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285e:	fe 01       	movw	r30, r28
    2860:	e0 5a       	subi	r30, 0xA0	; 160
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	60 81       	ld	r22, Z
    2866:	71 81       	ldd	r23, Z+1	; 0x01
    2868:	82 81       	ldd	r24, Z+2	; 0x02
    286a:	93 81       	ldd	r25, Z+3	; 0x03
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e2       	ldi	r20, 0x20	; 32
    2872:	51 e4       	ldi	r21, 0x41	; 65
    2874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	8e 01       	movw	r16, r28
    287e:	06 5a       	subi	r16, 0xA6	; 166
    2880:	1f 4f       	sbci	r17, 0xFF	; 255
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	f8 01       	movw	r30, r16
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
    2894:	1f c0       	rjmp	.+62     	; 0x28d4 <newPass+0x7e0>
    2896:	fe 01       	movw	r30, r28
    2898:	e8 5a       	subi	r30, 0xA8	; 168
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	88 ec       	ldi	r24, 0xC8	; 200
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	91 83       	std	Z+1, r25	; 0x01
    28a2:	80 83       	st	Z, r24
    28a4:	fe 01       	movw	r30, r28
    28a6:	e8 5a       	subi	r30, 0xA8	; 168
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	80 81       	ld	r24, Z
    28ac:	91 81       	ldd	r25, Z+1	; 0x01
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <newPass+0x7ba>
    28b2:	fe 01       	movw	r30, r28
    28b4:	e8 5a       	subi	r30, 0xA8	; 168
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	91 83       	std	Z+1, r25	; 0x01
    28ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	de 01       	movw	r26, r28
    28be:	a6 5a       	subi	r26, 0xA6	; 166
    28c0:	bf 4f       	sbci	r27, 0xFF	; 255
    28c2:	fe 01       	movw	r30, r28
    28c4:	e6 5a       	subi	r30, 0xA6	; 166
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	80 81       	ld	r24, Z
    28ca:	91 81       	ldd	r25, Z+1	; 0x01
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	11 96       	adiw	r26, 0x01	; 1
    28d0:	9c 93       	st	X, r25
    28d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d4:	fe 01       	movw	r30, r28
    28d6:	e6 5a       	subi	r30, 0xA6	; 166
    28d8:	ff 4f       	sbci	r31, 0xFF	; 255
    28da:	80 81       	ld	r24, Z
    28dc:	91 81       	ldd	r25, Z+1	; 0x01
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	d1 f6       	brne	.-76     	; 0x2896 <newPass+0x7a2>
    28e2:	4b c0       	rjmp	.+150    	; 0x297a <newPass+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	8e 01       	movw	r16, r28
    28e6:	06 5a       	subi	r16, 0xA6	; 166
    28e8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ea:	fe 01       	movw	r30, r28
    28ec:	e4 5a       	subi	r30, 0xA4	; 164
    28ee:	ff 4f       	sbci	r31, 0xFF	; 255
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	f8 01       	movw	r30, r16
    2902:	91 83       	std	Z+1, r25	; 0x01
    2904:	80 83       	st	Z, r24
    2906:	de 01       	movw	r26, r28
    2908:	aa 5a       	subi	r26, 0xAA	; 170
    290a:	bf 4f       	sbci	r27, 0xFF	; 255
    290c:	fe 01       	movw	r30, r28
    290e:	e6 5a       	subi	r30, 0xA6	; 166
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	80 81       	ld	r24, Z
    2914:	91 81       	ldd	r25, Z+1	; 0x01
    2916:	11 96       	adiw	r26, 0x01	; 1
    2918:	9c 93       	st	X, r25
    291a:	8e 93       	st	-X, r24
    291c:	fe 01       	movw	r30, r28
    291e:	ea 5a       	subi	r30, 0xAA	; 170
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	80 81       	ld	r24, Z
    2924:	91 81       	ldd	r25, Z+1	; 0x01
    2926:	01 97       	sbiw	r24, 0x01	; 1
    2928:	f1 f7       	brne	.-4      	; 0x2926 <newPass+0x832>
    292a:	fe 01       	movw	r30, r28
    292c:	ea 5a       	subi	r30, 0xAA	; 170
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	91 83       	std	Z+1, r25	; 0x01
    2932:	80 83       	st	Z, r24
    2934:	22 c0       	rjmp	.+68     	; 0x297a <newPass+0x886>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2936:	8e 01       	movw	r16, r28
    2938:	0c 59       	subi	r16, 0x9C	; 156
    293a:	1f 4f       	sbci	r17, 0xFF	; 255
    293c:	fe 01       	movw	r30, r28
    293e:	eb 59       	subi	r30, 0x9B	; 155
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	60 81       	ld	r22, Z
    2944:	71 81       	ldd	r23, Z+1	; 0x01
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	93 81       	ldd	r25, Z+3	; 0x03
    294a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	f8 01       	movw	r30, r16
    2954:	80 83       	st	Z, r24
    2956:	de 01       	movw	r26, r28
    2958:	ab 5a       	subi	r26, 0xAB	; 171
    295a:	bf 4f       	sbci	r27, 0xFF	; 255
    295c:	fe 01       	movw	r30, r28
    295e:	ec 59       	subi	r30, 0x9C	; 156
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2966:	fe 01       	movw	r30, r28
    2968:	eb 5a       	subi	r30, 0xAB	; 171
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	80 81       	ld	r24, Z
    296e:	8a 95       	dec	r24
    2970:	f1 f7       	brne	.-4      	; 0x296e <newPass+0x87a>
    2972:	fe 01       	movw	r30, r28
    2974:	eb 5a       	subi	r30, 0xAB	; 171
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 83       	st	Z, r24
	_delay_us(50);

	UART_sendString(pass);
    297a:	8a ed       	ldi	r24, 0xDA	; 218
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <UART_sendString>
    2982:	fe 01       	movw	r30, r28
    2984:	ef 5a       	subi	r30, 0xAF	; 175
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	a8 e4       	ldi	r26, 0x48	; 72
    298e:	b2 e4       	ldi	r27, 0x42	; 66
    2990:	80 83       	st	Z, r24
    2992:	91 83       	std	Z+1, r25	; 0x01
    2994:	a2 83       	std	Z+2, r26	; 0x02
    2996:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2998:	8e 01       	movw	r16, r28
    299a:	03 5b       	subi	r16, 0xB3	; 179
    299c:	1f 4f       	sbci	r17, 0xFF	; 255
    299e:	fe 01       	movw	r30, r28
    29a0:	ef 5a       	subi	r30, 0xAF	; 175
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	60 81       	ld	r22, Z
    29a6:	71 81       	ldd	r23, Z+1	; 0x01
    29a8:	82 81       	ldd	r24, Z+2	; 0x02
    29aa:	93 81       	ldd	r25, Z+3	; 0x03
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	4a ef       	ldi	r20, 0xFA	; 250
    29b2:	54 e4       	ldi	r21, 0x44	; 68
    29b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	f8 01       	movw	r30, r16
    29be:	80 83       	st	Z, r24
    29c0:	91 83       	std	Z+1, r25	; 0x01
    29c2:	a2 83       	std	Z+2, r26	; 0x02
    29c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29c6:	fe 01       	movw	r30, r28
    29c8:	e3 5b       	subi	r30, 0xB3	; 179
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	60 81       	ld	r22, Z
    29ce:	71 81       	ldd	r23, Z+1	; 0x01
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	93 81       	ldd	r25, Z+3	; 0x03
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e8       	ldi	r20, 0x80	; 128
    29da:	5f e3       	ldi	r21, 0x3F	; 63
    29dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	44 f4       	brge	.+16     	; 0x29f4 <newPass+0x900>
		__ticks = 1;
    29e4:	fe 01       	movw	r30, r28
    29e6:	e5 5b       	subi	r30, 0xB5	; 181
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
    29f2:	64 c0       	rjmp	.+200    	; 0x2abc <newPass+0x9c8>
	else if (__tmp > 65535)
    29f4:	fe 01       	movw	r30, r28
    29f6:	e3 5b       	subi	r30, 0xB3	; 179
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	60 81       	ld	r22, Z
    29fc:	71 81       	ldd	r23, Z+1	; 0x01
    29fe:	82 81       	ldd	r24, Z+2	; 0x02
    2a00:	93 81       	ldd	r25, Z+3	; 0x03
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	3f ef       	ldi	r19, 0xFF	; 255
    2a06:	4f e7       	ldi	r20, 0x7F	; 127
    2a08:	57 e4       	ldi	r21, 0x47	; 71
    2a0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a0e:	18 16       	cp	r1, r24
    2a10:	0c f0       	brlt	.+2      	; 0x2a14 <newPass+0x920>
    2a12:	43 c0       	rjmp	.+134    	; 0x2a9a <newPass+0x9a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a14:	fe 01       	movw	r30, r28
    2a16:	ef 5a       	subi	r30, 0xAF	; 175
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	60 81       	ld	r22, Z
    2a1c:	71 81       	ldd	r23, Z+1	; 0x01
    2a1e:	82 81       	ldd	r24, Z+2	; 0x02
    2a20:	93 81       	ldd	r25, Z+3	; 0x03
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	40 e2       	ldi	r20, 0x20	; 32
    2a28:	51 e4       	ldi	r21, 0x41	; 65
    2a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	8e 01       	movw	r16, r28
    2a34:	05 5b       	subi	r16, 0xB5	; 181
    2a36:	1f 4f       	sbci	r17, 0xFF	; 255
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	f8 01       	movw	r30, r16
    2a46:	91 83       	std	Z+1, r25	; 0x01
    2a48:	80 83       	st	Z, r24
    2a4a:	1f c0       	rjmp	.+62     	; 0x2a8a <newPass+0x996>
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e7 5b       	subi	r30, 0xB7	; 183
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	88 ec       	ldi	r24, 0xC8	; 200
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	91 83       	std	Z+1, r25	; 0x01
    2a58:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	e7 5b       	subi	r30, 0xB7	; 183
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <newPass+0x970>
    2a68:	fe 01       	movw	r30, r28
    2a6a:	e7 5b       	subi	r30, 0xB7	; 183
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	91 83       	std	Z+1, r25	; 0x01
    2a70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a72:	de 01       	movw	r26, r28
    2a74:	a5 5b       	subi	r26, 0xB5	; 181
    2a76:	bf 4f       	sbci	r27, 0xFF	; 255
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e5 5b       	subi	r30, 0xB5	; 181
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 81       	ld	r24, Z
    2a80:	91 81       	ldd	r25, Z+1	; 0x01
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	11 96       	adiw	r26, 0x01	; 1
    2a86:	9c 93       	st	X, r25
    2a88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8a:	fe 01       	movw	r30, r28
    2a8c:	e5 5b       	subi	r30, 0xB5	; 181
    2a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a90:	80 81       	ld	r24, Z
    2a92:	91 81       	ldd	r25, Z+1	; 0x01
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	d1 f6       	brne	.-76     	; 0x2a4c <newPass+0x958>
    2a98:	27 c0       	rjmp	.+78     	; 0x2ae8 <newPass+0x9f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9a:	8e 01       	movw	r16, r28
    2a9c:	05 5b       	subi	r16, 0xB5	; 181
    2a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e3 5b       	subi	r30, 0xB3	; 179
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	60 81       	ld	r22, Z
    2aa8:	71 81       	ldd	r23, Z+1	; 0x01
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab2:	dc 01       	movw	r26, r24
    2ab4:	cb 01       	movw	r24, r22
    2ab6:	f8 01       	movw	r30, r16
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	80 83       	st	Z, r24
    2abc:	de 01       	movw	r26, r28
    2abe:	a9 5b       	subi	r26, 0xB9	; 185
    2ac0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ac2:	fe 01       	movw	r30, r28
    2ac4:	e5 5b       	subi	r30, 0xB5	; 181
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	80 81       	ld	r24, Z
    2aca:	91 81       	ldd	r25, Z+1	; 0x01
    2acc:	8d 93       	st	X+, r24
    2ace:	9c 93       	st	X, r25
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	e9 5b       	subi	r30, 0xB9	; 185
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	80 81       	ld	r24, Z
    2ad8:	91 81       	ldd	r25, Z+1	; 0x01
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <newPass+0x9e6>
    2ade:	fe 01       	movw	r30, r28
    2ae0:	e9 5b       	subi	r30, 0xB9	; 185
    2ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae4:	91 83       	std	Z+1, r25	; 0x01
    2ae6:	80 83       	st	Z, r24
	_delay_ms(50);
	LCD_clearScreen();
    2ae8:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	60 e0       	ldi	r22, 0x00	; 0
    2af0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <LCD_moveCursor>
	LCD_displayString("Re-enter pass:");
    2af4:	80 e7       	ldi	r24, 0x70	; 112
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayString>
	LCD_moveCursor(1,0);
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	60 e0       	ldi	r22, 0x00	; 0
    2b00:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <LCD_moveCursor>
	for(i=0;i<5;i++)
    2b04:	fe 01       	movw	r30, r28
    2b06:	eb 55       	subi	r30, 0x5B	; 91
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	10 82       	st	Z, r1
    2b0c:	10 c1       	rjmp	.+544    	; 0x2d2e <newPass+0xc3a>
	{
		check[i]=KEYPAD_getPressedKey()+48;
    2b0e:	fe 01       	movw	r30, r28
    2b10:	eb 55       	subi	r30, 0x5B	; 91
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	80 81       	ld	r24, Z
    2b16:	08 2f       	mov	r16, r24
    2b18:	10 e0       	ldi	r17, 0x00	; 0
    2b1a:	0e 94 20 0a 	call	0x1440	; 0x1440 <KEYPAD_getPressedKey>
    2b1e:	80 5d       	subi	r24, 0xD0	; 208
    2b20:	f8 01       	movw	r30, r16
    2b22:	ec 51       	subi	r30, 0x1C	; 28
    2b24:	ff 4f       	sbci	r31, 0xFF	; 255
    2b26:	80 83       	st	Z, r24
    2b28:	fe 01       	movw	r30, r28
    2b2a:	ed 5b       	subi	r30, 0xBD	; 189
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	a8 ec       	ldi	r26, 0xC8	; 200
    2b34:	b2 e4       	ldi	r27, 0x42	; 66
    2b36:	80 83       	st	Z, r24
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	a2 83       	std	Z+2, r26	; 0x02
    2b3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3e:	8e 01       	movw	r16, r28
    2b40:	01 5c       	subi	r16, 0xC1	; 193
    2b42:	1f 4f       	sbci	r17, 0xFF	; 255
    2b44:	fe 01       	movw	r30, r28
    2b46:	ed 5b       	subi	r30, 0xBD	; 189
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	60 81       	ld	r22, Z
    2b4c:	71 81       	ldd	r23, Z+1	; 0x01
    2b4e:	82 81       	ldd	r24, Z+2	; 0x02
    2b50:	93 81       	ldd	r25, Z+3	; 0x03
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	4a ef       	ldi	r20, 0xFA	; 250
    2b58:	54 e4       	ldi	r21, 0x44	; 68
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	f8 01       	movw	r30, r16
    2b64:	80 83       	st	Z, r24
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	a2 83       	std	Z+2, r26	; 0x02
    2b6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	ff 96       	adiw	r30, 0x3f	; 63
    2b70:	60 81       	ld	r22, Z
    2b72:	71 81       	ldd	r23, Z+1	; 0x01
    2b74:	82 81       	ldd	r24, Z+2	; 0x02
    2b76:	93 81       	ldd	r25, Z+3	; 0x03
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e8       	ldi	r20, 0x80	; 128
    2b7e:	5f e3       	ldi	r21, 0x3F	; 63
    2b80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b84:	88 23       	and	r24, r24
    2b86:	2c f4       	brge	.+10     	; 0x2b92 <newPass+0xa9e>
		__ticks = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	9e af       	std	Y+62, r25	; 0x3e
    2b8e:	8d af       	std	Y+61, r24	; 0x3d
    2b90:	46 c0       	rjmp	.+140    	; 0x2c1e <newPass+0xb2a>
	else if (__tmp > 65535)
    2b92:	fe 01       	movw	r30, r28
    2b94:	ff 96       	adiw	r30, 0x3f	; 63
    2b96:	60 81       	ld	r22, Z
    2b98:	71 81       	ldd	r23, Z+1	; 0x01
    2b9a:	82 81       	ldd	r24, Z+2	; 0x02
    2b9c:	93 81       	ldd	r25, Z+3	; 0x03
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	57 e4       	ldi	r21, 0x47	; 71
    2ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2baa:	18 16       	cp	r1, r24
    2bac:	64 f5       	brge	.+88     	; 0x2c06 <newPass+0xb12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bae:	fe 01       	movw	r30, r28
    2bb0:	ed 5b       	subi	r30, 0xBD	; 189
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	60 81       	ld	r22, Z
    2bb6:	71 81       	ldd	r23, Z+1	; 0x01
    2bb8:	82 81       	ldd	r24, Z+2	; 0x02
    2bba:	93 81       	ldd	r25, Z+3	; 0x03
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	40 e2       	ldi	r20, 0x20	; 32
    2bc2:	51 e4       	ldi	r21, 0x41	; 65
    2bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	bc 01       	movw	r22, r24
    2bce:	cd 01       	movw	r24, r26
    2bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9e af       	std	Y+62, r25	; 0x3e
    2bda:	8d af       	std	Y+61, r24	; 0x3d
    2bdc:	0f c0       	rjmp	.+30     	; 0x2bfc <newPass+0xb08>
    2bde:	88 ec       	ldi	r24, 0xC8	; 200
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	9c af       	std	Y+60, r25	; 0x3c
    2be4:	8b af       	std	Y+59, r24	; 0x3b
    2be6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2be8:	9c ad       	ldd	r25, Y+60	; 0x3c
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <newPass+0xaf6>
    2bee:	9c af       	std	Y+60, r25	; 0x3c
    2bf0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bf2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bf4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	9e af       	std	Y+62, r25	; 0x3e
    2bfa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bfc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bfe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	69 f7       	brne	.-38     	; 0x2bde <newPass+0xaea>
    2c04:	16 c0       	rjmp	.+44     	; 0x2c32 <newPass+0xb3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c06:	fe 01       	movw	r30, r28
    2c08:	ff 96       	adiw	r30, 0x3f	; 63
    2c0a:	60 81       	ld	r22, Z
    2c0c:	71 81       	ldd	r23, Z+1	; 0x01
    2c0e:	82 81       	ldd	r24, Z+2	; 0x02
    2c10:	93 81       	ldd	r25, Z+3	; 0x03
    2c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	9e af       	std	Y+62, r25	; 0x3e
    2c1c:	8d af       	std	Y+61, r24	; 0x3d
    2c1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c20:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c22:	9a af       	std	Y+58, r25	; 0x3a
    2c24:	89 af       	std	Y+57, r24	; 0x39
    2c26:	89 ad       	ldd	r24, Y+57	; 0x39
    2c28:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	f1 f7       	brne	.-4      	; 0x2c2a <newPass+0xb36>
    2c2e:	9a af       	std	Y+58, r25	; 0x3a
    2c30:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(100);
		LCD_displayCharacter('*');
    2c32:	8a e2       	ldi	r24, 0x2A	; 42
    2c34:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <LCD_displayCharacter>
    2c38:	80 e0       	ldi	r24, 0x00	; 0
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	a8 ec       	ldi	r26, 0xC8	; 200
    2c3e:	b2 e4       	ldi	r27, 0x42	; 66
    2c40:	8d ab       	std	Y+53, r24	; 0x35
    2c42:	9e ab       	std	Y+54, r25	; 0x36
    2c44:	af ab       	std	Y+55, r26	; 0x37
    2c46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c48:	6d a9       	ldd	r22, Y+53	; 0x35
    2c4a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c4c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c4e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	4a ef       	ldi	r20, 0xFA	; 250
    2c56:	54 e4       	ldi	r21, 0x44	; 68
    2c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	89 ab       	std	Y+49, r24	; 0x31
    2c62:	9a ab       	std	Y+50, r25	; 0x32
    2c64:	ab ab       	std	Y+51, r26	; 0x33
    2c66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c68:	69 a9       	ldd	r22, Y+49	; 0x31
    2c6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e8       	ldi	r20, 0x80	; 128
    2c76:	5f e3       	ldi	r21, 0x3F	; 63
    2c78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7c:	88 23       	and	r24, r24
    2c7e:	2c f4       	brge	.+10     	; 0x2c8a <newPass+0xb96>
		__ticks = 1;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	98 ab       	std	Y+48, r25	; 0x30
    2c86:	8f a7       	std	Y+47, r24	; 0x2f
    2c88:	3f c0       	rjmp	.+126    	; 0x2d08 <newPass+0xc14>
	else if (__tmp > 65535)
    2c8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c90:	9c a9       	ldd	r25, Y+52	; 0x34
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	3f ef       	ldi	r19, 0xFF	; 255
    2c96:	4f e7       	ldi	r20, 0x7F	; 127
    2c98:	57 e4       	ldi	r21, 0x47	; 71
    2c9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9e:	18 16       	cp	r1, r24
    2ca0:	4c f5       	brge	.+82     	; 0x2cf4 <newPass+0xc00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ca4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ca6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ca8:	98 ad       	ldd	r25, Y+56	; 0x38
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e2       	ldi	r20, 0x20	; 32
    2cb0:	51 e4       	ldi	r21, 0x41	; 65
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	98 ab       	std	Y+48, r25	; 0x30
    2cc8:	8f a7       	std	Y+47, r24	; 0x2f
    2cca:	0f c0       	rjmp	.+30     	; 0x2cea <newPass+0xbf6>
    2ccc:	88 ec       	ldi	r24, 0xC8	; 200
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	9e a7       	std	Y+46, r25	; 0x2e
    2cd2:	8d a7       	std	Y+45, r24	; 0x2d
    2cd4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cd6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <newPass+0xbe4>
    2cdc:	9e a7       	std	Y+46, r25	; 0x2e
    2cde:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	98 ab       	std	Y+48, r25	; 0x30
    2ce8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cec:	98 a9       	ldd	r25, Y+48	; 0x30
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	69 f7       	brne	.-38     	; 0x2ccc <newPass+0xbd8>
    2cf2:	14 c0       	rjmp	.+40     	; 0x2d1c <newPass+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf4:	69 a9       	ldd	r22, Y+49	; 0x31
    2cf6:	7a a9       	ldd	r23, Y+50	; 0x32
    2cf8:	8b a9       	ldd	r24, Y+51	; 0x33
    2cfa:	9c a9       	ldd	r25, Y+52	; 0x34
    2cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	98 ab       	std	Y+48, r25	; 0x30
    2d06:	8f a7       	std	Y+47, r24	; 0x2f
    2d08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d0c:	9c a7       	std	Y+44, r25	; 0x2c
    2d0e:	8b a7       	std	Y+43, r24	; 0x2b
    2d10:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d12:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <newPass+0xc20>
    2d18:	9c a7       	std	Y+44, r25	; 0x2c
    2d1a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString("Re-enter pass:");
	LCD_moveCursor(1,0);
	for(i=0;i<5;i++)
    2d1c:	de 01       	movw	r26, r28
    2d1e:	ab 55       	subi	r26, 0x5B	; 91
    2d20:	bf 4f       	sbci	r27, 0xFF	; 255
    2d22:	fe 01       	movw	r30, r28
    2d24:	eb 55       	subi	r30, 0x5B	; 91
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	8f 5f       	subi	r24, 0xFF	; 255
    2d2c:	8c 93       	st	X, r24
    2d2e:	fe 01       	movw	r30, r28
    2d30:	eb 55       	subi	r30, 0x5B	; 91
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	80 81       	ld	r24, Z
    2d36:	85 30       	cpi	r24, 0x05	; 5
    2d38:	08 f4       	brcc	.+2      	; 0x2d3c <newPass+0xc48>
    2d3a:	e9 ce       	rjmp	.-558    	; 0x2b0e <newPass+0xa1a>
    2d3c:	80 e0       	ldi	r24, 0x00	; 0
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	a8 ec       	ldi	r26, 0xC8	; 200
    2d42:	b2 e4       	ldi	r27, 0x42	; 66
    2d44:	8f a3       	std	Y+39, r24	; 0x27
    2d46:	98 a7       	std	Y+40, r25	; 0x28
    2d48:	a9 a7       	std	Y+41, r26	; 0x29
    2d4a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d4c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d4e:	78 a5       	ldd	r23, Y+40	; 0x28
    2d50:	89 a5       	ldd	r24, Y+41	; 0x29
    2d52:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d54:	20 e0       	ldi	r18, 0x00	; 0
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	4a ef       	ldi	r20, 0xFA	; 250
    2d5a:	54 e4       	ldi	r21, 0x44	; 68
    2d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d60:	dc 01       	movw	r26, r24
    2d62:	cb 01       	movw	r24, r22
    2d64:	8b a3       	std	Y+35, r24	; 0x23
    2d66:	9c a3       	std	Y+36, r25	; 0x24
    2d68:	ad a3       	std	Y+37, r26	; 0x25
    2d6a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2d6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2d70:	8d a1       	ldd	r24, Y+37	; 0x25
    2d72:	9e a1       	ldd	r25, Y+38	; 0x26
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	40 e8       	ldi	r20, 0x80	; 128
    2d7a:	5f e3       	ldi	r21, 0x3F	; 63
    2d7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d80:	88 23       	and	r24, r24
    2d82:	2c f4       	brge	.+10     	; 0x2d8e <newPass+0xc9a>
		__ticks = 1;
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	9a a3       	std	Y+34, r25	; 0x22
    2d8a:	89 a3       	std	Y+33, r24	; 0x21
    2d8c:	3f c0       	rjmp	.+126    	; 0x2e0c <newPass+0xd18>
	else if (__tmp > 65535)
    2d8e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d90:	7c a1       	ldd	r23, Y+36	; 0x24
    2d92:	8d a1       	ldd	r24, Y+37	; 0x25
    2d94:	9e a1       	ldd	r25, Y+38	; 0x26
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	3f ef       	ldi	r19, 0xFF	; 255
    2d9a:	4f e7       	ldi	r20, 0x7F	; 127
    2d9c:	57 e4       	ldi	r21, 0x47	; 71
    2d9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2da2:	18 16       	cp	r1, r24
    2da4:	4c f5       	brge	.+82     	; 0x2df8 <newPass+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da6:	6f a1       	ldd	r22, Y+39	; 0x27
    2da8:	78 a5       	ldd	r23, Y+40	; 0x28
    2daa:	89 a5       	ldd	r24, Y+41	; 0x29
    2dac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	40 e2       	ldi	r20, 0x20	; 32
    2db4:	51 e4       	ldi	r21, 0x41	; 65
    2db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	bc 01       	movw	r22, r24
    2dc0:	cd 01       	movw	r24, r26
    2dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	9a a3       	std	Y+34, r25	; 0x22
    2dcc:	89 a3       	std	Y+33, r24	; 0x21
    2dce:	0f c0       	rjmp	.+30     	; 0x2dee <newPass+0xcfa>
    2dd0:	88 ec       	ldi	r24, 0xC8	; 200
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	98 a3       	std	Y+32, r25	; 0x20
    2dd6:	8f 8f       	std	Y+31, r24	; 0x1f
    2dd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dda:	98 a1       	ldd	r25, Y+32	; 0x20
    2ddc:	01 97       	sbiw	r24, 0x01	; 1
    2dde:	f1 f7       	brne	.-4      	; 0x2ddc <newPass+0xce8>
    2de0:	98 a3       	std	Y+32, r25	; 0x20
    2de2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de4:	89 a1       	ldd	r24, Y+33	; 0x21
    2de6:	9a a1       	ldd	r25, Y+34	; 0x22
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	9a a3       	std	Y+34, r25	; 0x22
    2dec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dee:	89 a1       	ldd	r24, Y+33	; 0x21
    2df0:	9a a1       	ldd	r25, Y+34	; 0x22
    2df2:	00 97       	sbiw	r24, 0x00	; 0
    2df4:	69 f7       	brne	.-38     	; 0x2dd0 <newPass+0xcdc>
    2df6:	14 c0       	rjmp	.+40     	; 0x2e20 <newPass+0xd2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df8:	6b a1       	ldd	r22, Y+35	; 0x23
    2dfa:	7c a1       	ldd	r23, Y+36	; 0x24
    2dfc:	8d a1       	ldd	r24, Y+37	; 0x25
    2dfe:	9e a1       	ldd	r25, Y+38	; 0x26
    2e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	9a a3       	std	Y+34, r25	; 0x22
    2e0a:	89 a3       	std	Y+33, r24	; 0x21
    2e0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e10:	9e 8f       	std	Y+30, r25	; 0x1e
    2e12:	8d 8f       	std	Y+29, r24	; 0x1d
    2e14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	f1 f7       	brne	.-4      	; 0x2e18 <newPass+0xd24>
    2e1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e1e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		LCD_displayCharacter('*');
		_delay_ms(100);
	}
	_delay_ms(100);
	while(KEYPAD_getPressedKey()!='=')
    2e20:	0e 94 20 0a 	call	0x1440	; 0x1440 <KEYPAD_getPressedKey>
    2e24:	8d 33       	cpi	r24, 0x3D	; 61
    2e26:	e1 f7       	brne	.-8      	; 0x2e20 <newPass+0xd2c>
	{
	}
	check[i]='=';
    2e28:	fe 01       	movw	r30, r28
    2e2a:	eb 55       	subi	r30, 0x5B	; 91
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	80 81       	ld	r24, Z
    2e30:	88 2f       	mov	r24, r24
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	fc 01       	movw	r30, r24
    2e36:	ec 51       	subi	r30, 0x1C	; 28
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	8d e3       	ldi	r24, 0x3D	; 61
    2e3c:	80 83       	st	Z, r24
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	a8 e4       	ldi	r26, 0x48	; 72
    2e44:	b2 e4       	ldi	r27, 0x42	; 66
    2e46:	89 8f       	std	Y+25, r24	; 0x19
    2e48:	9a 8f       	std	Y+26, r25	; 0x1a
    2e4a:	ab 8f       	std	Y+27, r26	; 0x1b
    2e4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e4e:	69 8d       	ldd	r22, Y+25	; 0x19
    2e50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	4a ef       	ldi	r20, 0xFA	; 250
    2e5c:	54 e4       	ldi	r21, 0x44	; 68
    2e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	8d 8b       	std	Y+21, r24	; 0x15
    2e68:	9e 8b       	std	Y+22, r25	; 0x16
    2e6a:	af 8b       	std	Y+23, r26	; 0x17
    2e6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e70:	7e 89       	ldd	r23, Y+22	; 0x16
    2e72:	8f 89       	ldd	r24, Y+23	; 0x17
    2e74:	98 8d       	ldd	r25, Y+24	; 0x18
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	40 e8       	ldi	r20, 0x80	; 128
    2e7c:	5f e3       	ldi	r21, 0x3F	; 63
    2e7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e82:	88 23       	and	r24, r24
    2e84:	2c f4       	brge	.+10     	; 0x2e90 <newPass+0xd9c>
		__ticks = 1;
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	9c 8b       	std	Y+20, r25	; 0x14
    2e8c:	8b 8b       	std	Y+19, r24	; 0x13
    2e8e:	3f c0       	rjmp	.+126    	; 0x2f0e <newPass+0xe1a>
	else if (__tmp > 65535)
    2e90:	6d 89       	ldd	r22, Y+21	; 0x15
    2e92:	7e 89       	ldd	r23, Y+22	; 0x16
    2e94:	8f 89       	ldd	r24, Y+23	; 0x17
    2e96:	98 8d       	ldd	r25, Y+24	; 0x18
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	3f ef       	ldi	r19, 0xFF	; 255
    2e9c:	4f e7       	ldi	r20, 0x7F	; 127
    2e9e:	57 e4       	ldi	r21, 0x47	; 71
    2ea0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ea4:	18 16       	cp	r1, r24
    2ea6:	4c f5       	brge	.+82     	; 0x2efa <newPass+0xe06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea8:	69 8d       	ldd	r22, Y+25	; 0x19
    2eaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2eac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	40 e2       	ldi	r20, 0x20	; 32
    2eb6:	51 e4       	ldi	r21, 0x41	; 65
    2eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	bc 01       	movw	r22, r24
    2ec2:	cd 01       	movw	r24, r26
    2ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	9c 8b       	std	Y+20, r25	; 0x14
    2ece:	8b 8b       	std	Y+19, r24	; 0x13
    2ed0:	0f c0       	rjmp	.+30     	; 0x2ef0 <newPass+0xdfc>
    2ed2:	88 ec       	ldi	r24, 0xC8	; 200
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9a 8b       	std	Y+18, r25	; 0x12
    2ed8:	89 8b       	std	Y+17, r24	; 0x11
    2eda:	89 89       	ldd	r24, Y+17	; 0x11
    2edc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	f1 f7       	brne	.-4      	; 0x2ede <newPass+0xdea>
    2ee2:	9a 8b       	std	Y+18, r25	; 0x12
    2ee4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee8:	9c 89       	ldd	r25, Y+20	; 0x14
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	9c 8b       	std	Y+20, r25	; 0x14
    2eee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef4:	00 97       	sbiw	r24, 0x00	; 0
    2ef6:	69 f7       	brne	.-38     	; 0x2ed2 <newPass+0xdde>
    2ef8:	14 c0       	rjmp	.+40     	; 0x2f22 <newPass+0xe2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2efa:	6d 89       	ldd	r22, Y+21	; 0x15
    2efc:	7e 89       	ldd	r23, Y+22	; 0x16
    2efe:	8f 89       	ldd	r24, Y+23	; 0x17
    2f00:	98 8d       	ldd	r25, Y+24	; 0x18
    2f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	9c 8b       	std	Y+20, r25	; 0x14
    2f0c:	8b 8b       	std	Y+19, r24	; 0x13
    2f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f10:	9c 89       	ldd	r25, Y+20	; 0x14
    2f12:	98 8b       	std	Y+16, r25	; 0x10
    2f14:	8f 87       	std	Y+15, r24	; 0x0f
    2f16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f18:	98 89       	ldd	r25, Y+16	; 0x10
    2f1a:	01 97       	sbiw	r24, 0x01	; 1
    2f1c:	f1 f7       	brne	.-4      	; 0x2f1a <newPass+0xe26>
    2f1e:	98 8b       	std	Y+16, r25	; 0x10
    2f20:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	LCD_clearScreen();
    2f22:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_clearScreen>
	UART_sendString(check);
    2f26:	84 ee       	ldi	r24, 0xE4	; 228
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <UART_sendString>
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	a0 ea       	ldi	r26, 0xA0	; 160
    2f34:	b1 e4       	ldi	r27, 0x41	; 65
    2f36:	8b 87       	std	Y+11, r24	; 0x0b
    2f38:	9c 87       	std	Y+12, r25	; 0x0c
    2f3a:	ad 87       	std	Y+13, r26	; 0x0d
    2f3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	4a ef       	ldi	r20, 0xFA	; 250
    2f4c:	54 e4       	ldi	r21, 0x44	; 68
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	8f 83       	std	Y+7, r24	; 0x07
    2f58:	98 87       	std	Y+8, r25	; 0x08
    2f5a:	a9 87       	std	Y+9, r26	; 0x09
    2f5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f60:	78 85       	ldd	r23, Y+8	; 0x08
    2f62:	89 85       	ldd	r24, Y+9	; 0x09
    2f64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	40 e8       	ldi	r20, 0x80	; 128
    2f6c:	5f e3       	ldi	r21, 0x3F	; 63
    2f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f72:	88 23       	and	r24, r24
    2f74:	2c f4       	brge	.+10     	; 0x2f80 <newPass+0xe8c>
		__ticks = 1;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9e 83       	std	Y+6, r25	; 0x06
    2f7c:	8d 83       	std	Y+5, r24	; 0x05
    2f7e:	3f c0       	rjmp	.+126    	; 0x2ffe <newPass+0xf0a>
	else if (__tmp > 65535)
    2f80:	6f 81       	ldd	r22, Y+7	; 0x07
    2f82:	78 85       	ldd	r23, Y+8	; 0x08
    2f84:	89 85       	ldd	r24, Y+9	; 0x09
    2f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	3f ef       	ldi	r19, 0xFF	; 255
    2f8c:	4f e7       	ldi	r20, 0x7F	; 127
    2f8e:	57 e4       	ldi	r21, 0x47	; 71
    2f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f94:	18 16       	cp	r1, r24
    2f96:	4c f5       	brge	.+82     	; 0x2fea <newPass+0xef6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	40 e2       	ldi	r20, 0x20	; 32
    2fa6:	51 e4       	ldi	r21, 0x41	; 65
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	cd 01       	movw	r24, r26
    2fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
    2fc0:	0f c0       	rjmp	.+30     	; 0x2fe0 <newPass+0xeec>
    2fc2:	88 ec       	ldi	r24, 0xC8	; 200
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	9c 83       	std	Y+4, r25	; 0x04
    2fc8:	8b 83       	std	Y+3, r24	; 0x03
    2fca:	8b 81       	ldd	r24, Y+3	; 0x03
    2fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fce:	01 97       	sbiw	r24, 0x01	; 1
    2fd0:	f1 f7       	brne	.-4      	; 0x2fce <newPass+0xeda>
    2fd2:	9c 83       	std	Y+4, r25	; 0x04
    2fd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	9e 83       	std	Y+6, r25	; 0x06
    2fde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	69 f7       	brne	.-38     	; 0x2fc2 <newPass+0xece>
    2fe8:	14 c0       	rjmp	.+40     	; 0x3012 <newPass+0xf1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fea:	6f 81       	ldd	r22, Y+7	; 0x07
    2fec:	78 85       	ldd	r23, Y+8	; 0x08
    2fee:	89 85       	ldd	r24, Y+9	; 0x09
    2ff0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	9e 83       	std	Y+6, r25	; 0x06
    2ffc:	8d 83       	std	Y+5, r24	; 0x05
    2ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    3000:	9e 81       	ldd	r25, Y+6	; 0x06
    3002:	9a 83       	std	Y+2, r25	; 0x02
    3004:	89 83       	std	Y+1, r24	; 0x01
    3006:	89 81       	ldd	r24, Y+1	; 0x01
    3008:	9a 81       	ldd	r25, Y+2	; 0x02
    300a:	01 97       	sbiw	r24, 0x01	; 1
    300c:	f1 f7       	brne	.-4      	; 0x300a <newPass+0xf16>
    300e:	9a 83       	std	Y+2, r25	; 0x02
    3010:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_clearScreen();
    3012:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_clearScreen>


	g_compare=UART_recieveByte();
    3016:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <UART_recieveByte>
    301a:	80 93 e2 00 	sts	0x00E2, r24


	if(g_compare==1)
    301e:	80 91 e2 00 	lds	r24, 0x00E2
    3022:	81 30       	cpi	r24, 0x01	; 1
    3024:	31 f0       	breq	.+12     	; 0x3032 <newPass+0xf3e>
		{
		return;
		}
	else if(g_compare==0)
    3026:	80 91 e2 00 	lds	r24, 0x00E2
    302a:	88 23       	and	r24, r24
    302c:	11 f4       	brne	.+4      	; 0x3032 <newPass+0xf3e>
		newPass();
    302e:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <newPass>



}
    3032:	cb 55       	subi	r28, 0x5B	; 91
    3034:	df 4f       	sbci	r29, 0xFF	; 255
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	1f 91       	pop	r17
    3046:	0f 91       	pop	r16
    3048:	08 95       	ret

0000304a <enterPass>:

void enterPass()
{
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	cd b7       	in	r28, 0x3d	; 61
    3054:	de b7       	in	r29, 0x3e	; 62
    3056:	c5 55       	subi	r28, 0x55	; 85
    3058:	d0 40       	sbci	r29, 0x00	; 0
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	de bf       	out	0x3e, r29	; 62
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    3064:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_clearScreen>
	LCD_displayString("plz enter pass");
    3068:	8f e7       	ldi	r24, 0x7F	; 127
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayString>
	LCD_moveCursor(1, 0);
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	60 e0       	ldi	r22, 0x00	; 0
    3074:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <LCD_moveCursor>
	UART_sendByte(readPassw);
    3078:	8c e0       	ldi	r24, 0x0C	; 12
    307a:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <UART_sendByte>
	uint8 i;
	for(i=0;i<5;i++)
    307e:	fe 01       	movw	r30, r28
    3080:	eb 5a       	subi	r30, 0xAB	; 171
    3082:	ff 4f       	sbci	r31, 0xFF	; 255
    3084:	10 82       	st	Z, r1
    3086:	51 c1       	rjmp	.+674    	; 0x332a <enterPass+0x2e0>
	{
		pass[i]=KEYPAD_getPressedKey()+48;
    3088:	fe 01       	movw	r30, r28
    308a:	eb 5a       	subi	r30, 0xAB	; 171
    308c:	ff 4f       	sbci	r31, 0xFF	; 255
    308e:	80 81       	ld	r24, Z
    3090:	08 2f       	mov	r16, r24
    3092:	10 e0       	ldi	r17, 0x00	; 0
    3094:	0e 94 20 0a 	call	0x1440	; 0x1440 <KEYPAD_getPressedKey>
    3098:	80 5d       	subi	r24, 0xD0	; 208
    309a:	f8 01       	movw	r30, r16
    309c:	e6 52       	subi	r30, 0x26	; 38
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 83       	st	Z, r24
    30a2:	fe 01       	movw	r30, r28
    30a4:	ef 5a       	subi	r30, 0xAF	; 175
    30a6:	ff 4f       	sbci	r31, 0xFF	; 255
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a8 ec       	ldi	r26, 0xC8	; 200
    30ae:	b2 e4       	ldi	r27, 0x42	; 66
    30b0:	80 83       	st	Z, r24
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	a2 83       	std	Z+2, r26	; 0x02
    30b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b8:	8e 01       	movw	r16, r28
    30ba:	03 5b       	subi	r16, 0xB3	; 179
    30bc:	1f 4f       	sbci	r17, 0xFF	; 255
    30be:	fe 01       	movw	r30, r28
    30c0:	ef 5a       	subi	r30, 0xAF	; 175
    30c2:	ff 4f       	sbci	r31, 0xFF	; 255
    30c4:	60 81       	ld	r22, Z
    30c6:	71 81       	ldd	r23, Z+1	; 0x01
    30c8:	82 81       	ldd	r24, Z+2	; 0x02
    30ca:	93 81       	ldd	r25, Z+3	; 0x03
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	4a ef       	ldi	r20, 0xFA	; 250
    30d2:	54 e4       	ldi	r21, 0x44	; 68
    30d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	f8 01       	movw	r30, r16
    30de:	80 83       	st	Z, r24
    30e0:	91 83       	std	Z+1, r25	; 0x01
    30e2:	a2 83       	std	Z+2, r26	; 0x02
    30e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30e6:	fe 01       	movw	r30, r28
    30e8:	e3 5b       	subi	r30, 0xB3	; 179
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	60 81       	ld	r22, Z
    30ee:	71 81       	ldd	r23, Z+1	; 0x01
    30f0:	82 81       	ldd	r24, Z+2	; 0x02
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	40 e8       	ldi	r20, 0x80	; 128
    30fa:	5f e3       	ldi	r21, 0x3F	; 63
    30fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3100:	88 23       	and	r24, r24
    3102:	44 f4       	brge	.+16     	; 0x3114 <enterPass+0xca>
		__ticks = 1;
    3104:	fe 01       	movw	r30, r28
    3106:	e5 5b       	subi	r30, 0xB5	; 181
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	91 83       	std	Z+1, r25	; 0x01
    3110:	80 83       	st	Z, r24
    3112:	64 c0       	rjmp	.+200    	; 0x31dc <enterPass+0x192>
	else if (__tmp > 65535)
    3114:	fe 01       	movw	r30, r28
    3116:	e3 5b       	subi	r30, 0xB3	; 179
    3118:	ff 4f       	sbci	r31, 0xFF	; 255
    311a:	60 81       	ld	r22, Z
    311c:	71 81       	ldd	r23, Z+1	; 0x01
    311e:	82 81       	ldd	r24, Z+2	; 0x02
    3120:	93 81       	ldd	r25, Z+3	; 0x03
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	3f ef       	ldi	r19, 0xFF	; 255
    3126:	4f e7       	ldi	r20, 0x7F	; 127
    3128:	57 e4       	ldi	r21, 0x47	; 71
    312a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    312e:	18 16       	cp	r1, r24
    3130:	0c f0       	brlt	.+2      	; 0x3134 <enterPass+0xea>
    3132:	43 c0       	rjmp	.+134    	; 0x31ba <enterPass+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3134:	fe 01       	movw	r30, r28
    3136:	ef 5a       	subi	r30, 0xAF	; 175
    3138:	ff 4f       	sbci	r31, 0xFF	; 255
    313a:	60 81       	ld	r22, Z
    313c:	71 81       	ldd	r23, Z+1	; 0x01
    313e:	82 81       	ldd	r24, Z+2	; 0x02
    3140:	93 81       	ldd	r25, Z+3	; 0x03
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e2       	ldi	r20, 0x20	; 32
    3148:	51 e4       	ldi	r21, 0x41	; 65
    314a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	8e 01       	movw	r16, r28
    3154:	05 5b       	subi	r16, 0xB5	; 181
    3156:	1f 4f       	sbci	r17, 0xFF	; 255
    3158:	bc 01       	movw	r22, r24
    315a:	cd 01       	movw	r24, r26
    315c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	f8 01       	movw	r30, r16
    3166:	91 83       	std	Z+1, r25	; 0x01
    3168:	80 83       	st	Z, r24
    316a:	1f c0       	rjmp	.+62     	; 0x31aa <enterPass+0x160>
    316c:	fe 01       	movw	r30, r28
    316e:	e7 5b       	subi	r30, 0xB7	; 183
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	88 ec       	ldi	r24, 0xC8	; 200
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	91 83       	std	Z+1, r25	; 0x01
    3178:	80 83       	st	Z, r24
    317a:	fe 01       	movw	r30, r28
    317c:	e7 5b       	subi	r30, 0xB7	; 183
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	80 81       	ld	r24, Z
    3182:	91 81       	ldd	r25, Z+1	; 0x01
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <enterPass+0x13a>
    3188:	fe 01       	movw	r30, r28
    318a:	e7 5b       	subi	r30, 0xB7	; 183
    318c:	ff 4f       	sbci	r31, 0xFF	; 255
    318e:	91 83       	std	Z+1, r25	; 0x01
    3190:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3192:	de 01       	movw	r26, r28
    3194:	a5 5b       	subi	r26, 0xB5	; 181
    3196:	bf 4f       	sbci	r27, 0xFF	; 255
    3198:	fe 01       	movw	r30, r28
    319a:	e5 5b       	subi	r30, 0xB5	; 181
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	80 81       	ld	r24, Z
    31a0:	91 81       	ldd	r25, Z+1	; 0x01
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	11 96       	adiw	r26, 0x01	; 1
    31a6:	9c 93       	st	X, r25
    31a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31aa:	fe 01       	movw	r30, r28
    31ac:	e5 5b       	subi	r30, 0xB5	; 181
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	80 81       	ld	r24, Z
    31b2:	91 81       	ldd	r25, Z+1	; 0x01
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	d1 f6       	brne	.-76     	; 0x316c <enterPass+0x122>
    31b8:	27 c0       	rjmp	.+78     	; 0x3208 <enterPass+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ba:	8e 01       	movw	r16, r28
    31bc:	05 5b       	subi	r16, 0xB5	; 181
    31be:	1f 4f       	sbci	r17, 0xFF	; 255
    31c0:	fe 01       	movw	r30, r28
    31c2:	e3 5b       	subi	r30, 0xB3	; 179
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	60 81       	ld	r22, Z
    31c8:	71 81       	ldd	r23, Z+1	; 0x01
    31ca:	82 81       	ldd	r24, Z+2	; 0x02
    31cc:	93 81       	ldd	r25, Z+3	; 0x03
    31ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	f8 01       	movw	r30, r16
    31d8:	91 83       	std	Z+1, r25	; 0x01
    31da:	80 83       	st	Z, r24
    31dc:	de 01       	movw	r26, r28
    31de:	a9 5b       	subi	r26, 0xB9	; 185
    31e0:	bf 4f       	sbci	r27, 0xFF	; 255
    31e2:	fe 01       	movw	r30, r28
    31e4:	e5 5b       	subi	r30, 0xB5	; 181
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	80 81       	ld	r24, Z
    31ea:	91 81       	ldd	r25, Z+1	; 0x01
    31ec:	8d 93       	st	X+, r24
    31ee:	9c 93       	st	X, r25
    31f0:	fe 01       	movw	r30, r28
    31f2:	e9 5b       	subi	r30, 0xB9	; 185
    31f4:	ff 4f       	sbci	r31, 0xFF	; 255
    31f6:	80 81       	ld	r24, Z
    31f8:	91 81       	ldd	r25, Z+1	; 0x01
    31fa:	01 97       	sbiw	r24, 0x01	; 1
    31fc:	f1 f7       	brne	.-4      	; 0x31fa <enterPass+0x1b0>
    31fe:	fe 01       	movw	r30, r28
    3200:	e9 5b       	subi	r30, 0xB9	; 185
    3202:	ff 4f       	sbci	r31, 0xFF	; 255
    3204:	91 83       	std	Z+1, r25	; 0x01
    3206:	80 83       	st	Z, r24
		_delay_ms(100);
		LCD_displayCharacter('*');
    3208:	8a e2       	ldi	r24, 0x2A	; 42
    320a:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <LCD_displayCharacter>
    320e:	fe 01       	movw	r30, r28
    3210:	ed 5b       	subi	r30, 0xBD	; 189
    3212:	ff 4f       	sbci	r31, 0xFF	; 255
    3214:	80 e0       	ldi	r24, 0x00	; 0
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	a8 ec       	ldi	r26, 0xC8	; 200
    321a:	b2 e4       	ldi	r27, 0x42	; 66
    321c:	80 83       	st	Z, r24
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	a2 83       	std	Z+2, r26	; 0x02
    3222:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3224:	8e 01       	movw	r16, r28
    3226:	01 5c       	subi	r16, 0xC1	; 193
    3228:	1f 4f       	sbci	r17, 0xFF	; 255
    322a:	fe 01       	movw	r30, r28
    322c:	ed 5b       	subi	r30, 0xBD	; 189
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	60 81       	ld	r22, Z
    3232:	71 81       	ldd	r23, Z+1	; 0x01
    3234:	82 81       	ldd	r24, Z+2	; 0x02
    3236:	93 81       	ldd	r25, Z+3	; 0x03
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	4a ef       	ldi	r20, 0xFA	; 250
    323e:	54 e4       	ldi	r21, 0x44	; 68
    3240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	f8 01       	movw	r30, r16
    324a:	80 83       	st	Z, r24
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	a2 83       	std	Z+2, r26	; 0x02
    3250:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3252:	fe 01       	movw	r30, r28
    3254:	ff 96       	adiw	r30, 0x3f	; 63
    3256:	60 81       	ld	r22, Z
    3258:	71 81       	ldd	r23, Z+1	; 0x01
    325a:	82 81       	ldd	r24, Z+2	; 0x02
    325c:	93 81       	ldd	r25, Z+3	; 0x03
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	40 e8       	ldi	r20, 0x80	; 128
    3264:	5f e3       	ldi	r21, 0x3F	; 63
    3266:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    326a:	88 23       	and	r24, r24
    326c:	2c f4       	brge	.+10     	; 0x3278 <enterPass+0x22e>
		__ticks = 1;
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	9e af       	std	Y+62, r25	; 0x3e
    3274:	8d af       	std	Y+61, r24	; 0x3d
    3276:	46 c0       	rjmp	.+140    	; 0x3304 <enterPass+0x2ba>
	else if (__tmp > 65535)
    3278:	fe 01       	movw	r30, r28
    327a:	ff 96       	adiw	r30, 0x3f	; 63
    327c:	60 81       	ld	r22, Z
    327e:	71 81       	ldd	r23, Z+1	; 0x01
    3280:	82 81       	ldd	r24, Z+2	; 0x02
    3282:	93 81       	ldd	r25, Z+3	; 0x03
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	3f ef       	ldi	r19, 0xFF	; 255
    3288:	4f e7       	ldi	r20, 0x7F	; 127
    328a:	57 e4       	ldi	r21, 0x47	; 71
    328c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3290:	18 16       	cp	r1, r24
    3292:	64 f5       	brge	.+88     	; 0x32ec <enterPass+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3294:	fe 01       	movw	r30, r28
    3296:	ed 5b       	subi	r30, 0xBD	; 189
    3298:	ff 4f       	sbci	r31, 0xFF	; 255
    329a:	60 81       	ld	r22, Z
    329c:	71 81       	ldd	r23, Z+1	; 0x01
    329e:	82 81       	ldd	r24, Z+2	; 0x02
    32a0:	93 81       	ldd	r25, Z+3	; 0x03
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	40 e2       	ldi	r20, 0x20	; 32
    32a8:	51 e4       	ldi	r21, 0x41	; 65
    32aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	bc 01       	movw	r22, r24
    32b4:	cd 01       	movw	r24, r26
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9e af       	std	Y+62, r25	; 0x3e
    32c0:	8d af       	std	Y+61, r24	; 0x3d
    32c2:	0f c0       	rjmp	.+30     	; 0x32e2 <enterPass+0x298>
    32c4:	88 ec       	ldi	r24, 0xC8	; 200
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	9c af       	std	Y+60, r25	; 0x3c
    32ca:	8b af       	std	Y+59, r24	; 0x3b
    32cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    32ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <enterPass+0x286>
    32d4:	9c af       	std	Y+60, r25	; 0x3c
    32d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    32da:	9e ad       	ldd	r25, Y+62	; 0x3e
    32dc:	01 97       	sbiw	r24, 0x01	; 1
    32de:	9e af       	std	Y+62, r25	; 0x3e
    32e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    32e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    32e6:	00 97       	sbiw	r24, 0x00	; 0
    32e8:	69 f7       	brne	.-38     	; 0x32c4 <enterPass+0x27a>
    32ea:	16 c0       	rjmp	.+44     	; 0x3318 <enterPass+0x2ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ec:	fe 01       	movw	r30, r28
    32ee:	ff 96       	adiw	r30, 0x3f	; 63
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	82 81       	ldd	r24, Z+2	; 0x02
    32f6:	93 81       	ldd	r25, Z+3	; 0x03
    32f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	9e af       	std	Y+62, r25	; 0x3e
    3302:	8d af       	std	Y+61, r24	; 0x3d
    3304:	8d ad       	ldd	r24, Y+61	; 0x3d
    3306:	9e ad       	ldd	r25, Y+62	; 0x3e
    3308:	9a af       	std	Y+58, r25	; 0x3a
    330a:	89 af       	std	Y+57, r24	; 0x39
    330c:	89 ad       	ldd	r24, Y+57	; 0x39
    330e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3310:	01 97       	sbiw	r24, 0x01	; 1
    3312:	f1 f7       	brne	.-4      	; 0x3310 <enterPass+0x2c6>
    3314:	9a af       	std	Y+58, r25	; 0x3a
    3316:	89 af       	std	Y+57, r24	; 0x39
	LCD_clearScreen();
	LCD_displayString("plz enter pass");
	LCD_moveCursor(1, 0);
	UART_sendByte(readPassw);
	uint8 i;
	for(i=0;i<5;i++)
    3318:	de 01       	movw	r26, r28
    331a:	ab 5a       	subi	r26, 0xAB	; 171
    331c:	bf 4f       	sbci	r27, 0xFF	; 255
    331e:	fe 01       	movw	r30, r28
    3320:	eb 5a       	subi	r30, 0xAB	; 171
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
    3324:	80 81       	ld	r24, Z
    3326:	8f 5f       	subi	r24, 0xFF	; 255
    3328:	8c 93       	st	X, r24
    332a:	fe 01       	movw	r30, r28
    332c:	eb 5a       	subi	r30, 0xAB	; 171
    332e:	ff 4f       	sbci	r31, 0xFF	; 255
    3330:	80 81       	ld	r24, Z
    3332:	85 30       	cpi	r24, 0x05	; 5
    3334:	08 f4       	brcc	.+2      	; 0x3338 <enterPass+0x2ee>
    3336:	a8 ce       	rjmp	.-688    	; 0x3088 <enterPass+0x3e>
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	a8 ec       	ldi	r26, 0xC8	; 200
    333e:	b2 e4       	ldi	r27, 0x42	; 66
    3340:	8d ab       	std	Y+53, r24	; 0x35
    3342:	9e ab       	std	Y+54, r25	; 0x36
    3344:	af ab       	std	Y+55, r26	; 0x37
    3346:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3348:	6d a9       	ldd	r22, Y+53	; 0x35
    334a:	7e a9       	ldd	r23, Y+54	; 0x36
    334c:	8f a9       	ldd	r24, Y+55	; 0x37
    334e:	98 ad       	ldd	r25, Y+56	; 0x38
    3350:	20 e0       	ldi	r18, 0x00	; 0
    3352:	30 e0       	ldi	r19, 0x00	; 0
    3354:	4a ef       	ldi	r20, 0xFA	; 250
    3356:	54 e4       	ldi	r21, 0x44	; 68
    3358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	89 ab       	std	Y+49, r24	; 0x31
    3362:	9a ab       	std	Y+50, r25	; 0x32
    3364:	ab ab       	std	Y+51, r26	; 0x33
    3366:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3368:	69 a9       	ldd	r22, Y+49	; 0x31
    336a:	7a a9       	ldd	r23, Y+50	; 0x32
    336c:	8b a9       	ldd	r24, Y+51	; 0x33
    336e:	9c a9       	ldd	r25, Y+52	; 0x34
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	40 e8       	ldi	r20, 0x80	; 128
    3376:	5f e3       	ldi	r21, 0x3F	; 63
    3378:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    337c:	88 23       	and	r24, r24
    337e:	2c f4       	brge	.+10     	; 0x338a <enterPass+0x340>
		__ticks = 1;
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	98 ab       	std	Y+48, r25	; 0x30
    3386:	8f a7       	std	Y+47, r24	; 0x2f
    3388:	3f c0       	rjmp	.+126    	; 0x3408 <enterPass+0x3be>
	else if (__tmp > 65535)
    338a:	69 a9       	ldd	r22, Y+49	; 0x31
    338c:	7a a9       	ldd	r23, Y+50	; 0x32
    338e:	8b a9       	ldd	r24, Y+51	; 0x33
    3390:	9c a9       	ldd	r25, Y+52	; 0x34
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	3f ef       	ldi	r19, 0xFF	; 255
    3396:	4f e7       	ldi	r20, 0x7F	; 127
    3398:	57 e4       	ldi	r21, 0x47	; 71
    339a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    339e:	18 16       	cp	r1, r24
    33a0:	4c f5       	brge	.+82     	; 0x33f4 <enterPass+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a2:	6d a9       	ldd	r22, Y+53	; 0x35
    33a4:	7e a9       	ldd	r23, Y+54	; 0x36
    33a6:	8f a9       	ldd	r24, Y+55	; 0x37
    33a8:	98 ad       	ldd	r25, Y+56	; 0x38
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e2       	ldi	r20, 0x20	; 32
    33b0:	51 e4       	ldi	r21, 0x41	; 65
    33b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b6:	dc 01       	movw	r26, r24
    33b8:	cb 01       	movw	r24, r22
    33ba:	bc 01       	movw	r22, r24
    33bc:	cd 01       	movw	r24, r26
    33be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	98 ab       	std	Y+48, r25	; 0x30
    33c8:	8f a7       	std	Y+47, r24	; 0x2f
    33ca:	0f c0       	rjmp	.+30     	; 0x33ea <enterPass+0x3a0>
    33cc:	88 ec       	ldi	r24, 0xC8	; 200
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	9e a7       	std	Y+46, r25	; 0x2e
    33d2:	8d a7       	std	Y+45, r24	; 0x2d
    33d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    33d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	f1 f7       	brne	.-4      	; 0x33d8 <enterPass+0x38e>
    33dc:	9e a7       	std	Y+46, r25	; 0x2e
    33de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    33e2:	98 a9       	ldd	r25, Y+48	; 0x30
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	98 ab       	std	Y+48, r25	; 0x30
    33e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    33ec:	98 a9       	ldd	r25, Y+48	; 0x30
    33ee:	00 97       	sbiw	r24, 0x00	; 0
    33f0:	69 f7       	brne	.-38     	; 0x33cc <enterPass+0x382>
    33f2:	14 c0       	rjmp	.+40     	; 0x341c <enterPass+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f4:	69 a9       	ldd	r22, Y+49	; 0x31
    33f6:	7a a9       	ldd	r23, Y+50	; 0x32
    33f8:	8b a9       	ldd	r24, Y+51	; 0x33
    33fa:	9c a9       	ldd	r25, Y+52	; 0x34
    33fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3400:	dc 01       	movw	r26, r24
    3402:	cb 01       	movw	r24, r22
    3404:	98 ab       	std	Y+48, r25	; 0x30
    3406:	8f a7       	std	Y+47, r24	; 0x2f
    3408:	8f a5       	ldd	r24, Y+47	; 0x2f
    340a:	98 a9       	ldd	r25, Y+48	; 0x30
    340c:	9c a7       	std	Y+44, r25	; 0x2c
    340e:	8b a7       	std	Y+43, r24	; 0x2b
    3410:	8b a5       	ldd	r24, Y+43	; 0x2b
    3412:	9c a5       	ldd	r25, Y+44	; 0x2c
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	f1 f7       	brne	.-4      	; 0x3414 <enterPass+0x3ca>
    3418:	9c a7       	std	Y+44, r25	; 0x2c
    341a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		LCD_displayCharacter('*');
		_delay_ms(100);
	}
	_delay_ms(100);
	while(KEYPAD_getPressedKey()!='=')
    341c:	0e 94 20 0a 	call	0x1440	; 0x1440 <KEYPAD_getPressedKey>
    3420:	8d 33       	cpi	r24, 0x3D	; 61
    3422:	e1 f7       	brne	.-8      	; 0x341c <enterPass+0x3d2>
	{
	}
	pass[i]='=';
    3424:	fe 01       	movw	r30, r28
    3426:	eb 5a       	subi	r30, 0xAB	; 171
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	80 81       	ld	r24, Z
    342c:	88 2f       	mov	r24, r24
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	fc 01       	movw	r30, r24
    3432:	e6 52       	subi	r30, 0x26	; 38
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	8d e3       	ldi	r24, 0x3D	; 61
    3438:	80 83       	st	Z, r24
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	a8 e4       	ldi	r26, 0x48	; 72
    3440:	b2 e4       	ldi	r27, 0x42	; 66
    3442:	8f a3       	std	Y+39, r24	; 0x27
    3444:	98 a7       	std	Y+40, r25	; 0x28
    3446:	a9 a7       	std	Y+41, r26	; 0x29
    3448:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    344a:	6f a1       	ldd	r22, Y+39	; 0x27
    344c:	78 a5       	ldd	r23, Y+40	; 0x28
    344e:	89 a5       	ldd	r24, Y+41	; 0x29
    3450:	9a a5       	ldd	r25, Y+42	; 0x2a
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	4a ef       	ldi	r20, 0xFA	; 250
    3458:	54 e4       	ldi	r21, 0x44	; 68
    345a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	8b a3       	std	Y+35, r24	; 0x23
    3464:	9c a3       	std	Y+36, r25	; 0x24
    3466:	ad a3       	std	Y+37, r26	; 0x25
    3468:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    346a:	6b a1       	ldd	r22, Y+35	; 0x23
    346c:	7c a1       	ldd	r23, Y+36	; 0x24
    346e:	8d a1       	ldd	r24, Y+37	; 0x25
    3470:	9e a1       	ldd	r25, Y+38	; 0x26
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e8       	ldi	r20, 0x80	; 128
    3478:	5f e3       	ldi	r21, 0x3F	; 63
    347a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    347e:	88 23       	and	r24, r24
    3480:	2c f4       	brge	.+10     	; 0x348c <enterPass+0x442>
		__ticks = 1;
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	9a a3       	std	Y+34, r25	; 0x22
    3488:	89 a3       	std	Y+33, r24	; 0x21
    348a:	3f c0       	rjmp	.+126    	; 0x350a <enterPass+0x4c0>
	else if (__tmp > 65535)
    348c:	6b a1       	ldd	r22, Y+35	; 0x23
    348e:	7c a1       	ldd	r23, Y+36	; 0x24
    3490:	8d a1       	ldd	r24, Y+37	; 0x25
    3492:	9e a1       	ldd	r25, Y+38	; 0x26
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	3f ef       	ldi	r19, 0xFF	; 255
    3498:	4f e7       	ldi	r20, 0x7F	; 127
    349a:	57 e4       	ldi	r21, 0x47	; 71
    349c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34a0:	18 16       	cp	r1, r24
    34a2:	4c f5       	brge	.+82     	; 0x34f6 <enterPass+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a4:	6f a1       	ldd	r22, Y+39	; 0x27
    34a6:	78 a5       	ldd	r23, Y+40	; 0x28
    34a8:	89 a5       	ldd	r24, Y+41	; 0x29
    34aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	40 e2       	ldi	r20, 0x20	; 32
    34b2:	51 e4       	ldi	r21, 0x41	; 65
    34b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	bc 01       	movw	r22, r24
    34be:	cd 01       	movw	r24, r26
    34c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	9a a3       	std	Y+34, r25	; 0x22
    34ca:	89 a3       	std	Y+33, r24	; 0x21
    34cc:	0f c0       	rjmp	.+30     	; 0x34ec <enterPass+0x4a2>
    34ce:	88 ec       	ldi	r24, 0xC8	; 200
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	98 a3       	std	Y+32, r25	; 0x20
    34d4:	8f 8f       	std	Y+31, r24	; 0x1f
    34d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34d8:	98 a1       	ldd	r25, Y+32	; 0x20
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	f1 f7       	brne	.-4      	; 0x34da <enterPass+0x490>
    34de:	98 a3       	std	Y+32, r25	; 0x20
    34e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e2:	89 a1       	ldd	r24, Y+33	; 0x21
    34e4:	9a a1       	ldd	r25, Y+34	; 0x22
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	9a a3       	std	Y+34, r25	; 0x22
    34ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ec:	89 a1       	ldd	r24, Y+33	; 0x21
    34ee:	9a a1       	ldd	r25, Y+34	; 0x22
    34f0:	00 97       	sbiw	r24, 0x00	; 0
    34f2:	69 f7       	brne	.-38     	; 0x34ce <enterPass+0x484>
    34f4:	14 c0       	rjmp	.+40     	; 0x351e <enterPass+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f6:	6b a1       	ldd	r22, Y+35	; 0x23
    34f8:	7c a1       	ldd	r23, Y+36	; 0x24
    34fa:	8d a1       	ldd	r24, Y+37	; 0x25
    34fc:	9e a1       	ldd	r25, Y+38	; 0x26
    34fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	9a a3       	std	Y+34, r25	; 0x22
    3508:	89 a3       	std	Y+33, r24	; 0x21
    350a:	89 a1       	ldd	r24, Y+33	; 0x21
    350c:	9a a1       	ldd	r25, Y+34	; 0x22
    350e:	9e 8f       	std	Y+30, r25	; 0x1e
    3510:	8d 8f       	std	Y+29, r24	; 0x1d
    3512:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3514:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	f1 f7       	brne	.-4      	; 0x3516 <enterPass+0x4cc>
    351a:	9e 8f       	std	Y+30, r25	; 0x1e
    351c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);

	UART_sendString(pass);
    351e:	8a ed       	ldi	r24, 0xDA	; 218
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <UART_sendString>
	g_compare=UART_recieveByte();   //Check if password is right
    3526:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <UART_recieveByte>
    352a:	80 93 e2 00 	sts	0x00E2, r24
    352e:	12 c0       	rjmp	.+36     	; 0x3554 <enterPass+0x50a>

	while(g_checkCount<2)
	{
		if(g_compare==1)
    3530:	80 91 e2 00 	lds	r24, 0x00E2
    3534:	81 30       	cpi	r24, 0x01	; 1
    3536:	19 f4       	brne	.+6      	; 0x353e <enterPass+0x4f4>
		{
			g_checkCount=0;
    3538:	10 92 e0 00 	sts	0x00E0, r1
    353c:	0d c1       	rjmp	.+538    	; 0x3758 <enterPass+0x70e>
			return;
		}
		else if(g_compare==0)
    353e:	80 91 e2 00 	lds	r24, 0x00E2
    3542:	88 23       	and	r24, r24
    3544:	39 f4       	brne	.+14     	; 0x3554 <enterPass+0x50a>
		{
			g_checkCount++;
    3546:	80 91 e0 00 	lds	r24, 0x00E0
    354a:	8f 5f       	subi	r24, 0xFF	; 255
    354c:	80 93 e0 00 	sts	0x00E0, r24
			enterPass();
    3550:	0e 94 25 18 	call	0x304a	; 0x304a <enterPass>
	_delay_ms(50);

	UART_sendString(pass);
	g_compare=UART_recieveByte();   //Check if password is right

	while(g_checkCount<2)
    3554:	80 91 e0 00 	lds	r24, 0x00E0
    3558:	82 30       	cpi	r24, 0x02	; 2
    355a:	50 f3       	brcs	.-44     	; 0x3530 <enterPass+0x4e6>
		{
			g_checkCount++;
			enterPass();
		}
	}
	if(g_checkCount==2)
    355c:	80 91 e0 00 	lds	r24, 0x00E0
    3560:	82 30       	cpi	r24, 0x02	; 2
    3562:	09 f0       	breq	.+2      	; 0x3566 <enterPass+0x51c>
    3564:	f9 c0       	rjmp	.+498    	; 0x3758 <enterPass+0x70e>
    3566:	80 e0       	ldi	r24, 0x00	; 0
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	a8 e4       	ldi	r26, 0x48	; 72
    356c:	b2 e4       	ldi	r27, 0x42	; 66
    356e:	89 8f       	std	Y+25, r24	; 0x19
    3570:	9a 8f       	std	Y+26, r25	; 0x1a
    3572:	ab 8f       	std	Y+27, r26	; 0x1b
    3574:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3576:	69 8d       	ldd	r22, Y+25	; 0x19
    3578:	7a 8d       	ldd	r23, Y+26	; 0x1a
    357a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    357c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    357e:	20 e0       	ldi	r18, 0x00	; 0
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	4a ef       	ldi	r20, 0xFA	; 250
    3584:	54 e4       	ldi	r21, 0x44	; 68
    3586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	8d 8b       	std	Y+21, r24	; 0x15
    3590:	9e 8b       	std	Y+22, r25	; 0x16
    3592:	af 8b       	std	Y+23, r26	; 0x17
    3594:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3596:	6d 89       	ldd	r22, Y+21	; 0x15
    3598:	7e 89       	ldd	r23, Y+22	; 0x16
    359a:	8f 89       	ldd	r24, Y+23	; 0x17
    359c:	98 8d       	ldd	r25, Y+24	; 0x18
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	40 e8       	ldi	r20, 0x80	; 128
    35a4:	5f e3       	ldi	r21, 0x3F	; 63
    35a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35aa:	88 23       	and	r24, r24
    35ac:	2c f4       	brge	.+10     	; 0x35b8 <enterPass+0x56e>
		__ticks = 1;
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	9c 8b       	std	Y+20, r25	; 0x14
    35b4:	8b 8b       	std	Y+19, r24	; 0x13
    35b6:	3f c0       	rjmp	.+126    	; 0x3636 <enterPass+0x5ec>
	else if (__tmp > 65535)
    35b8:	6d 89       	ldd	r22, Y+21	; 0x15
    35ba:	7e 89       	ldd	r23, Y+22	; 0x16
    35bc:	8f 89       	ldd	r24, Y+23	; 0x17
    35be:	98 8d       	ldd	r25, Y+24	; 0x18
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	3f ef       	ldi	r19, 0xFF	; 255
    35c4:	4f e7       	ldi	r20, 0x7F	; 127
    35c6:	57 e4       	ldi	r21, 0x47	; 71
    35c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35cc:	18 16       	cp	r1, r24
    35ce:	4c f5       	brge	.+82     	; 0x3622 <enterPass+0x5d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d0:	69 8d       	ldd	r22, Y+25	; 0x19
    35d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35d8:	20 e0       	ldi	r18, 0x00	; 0
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	40 e2       	ldi	r20, 0x20	; 32
    35de:	51 e4       	ldi	r21, 0x41	; 65
    35e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e4:	dc 01       	movw	r26, r24
    35e6:	cb 01       	movw	r24, r22
    35e8:	bc 01       	movw	r22, r24
    35ea:	cd 01       	movw	r24, r26
    35ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f0:	dc 01       	movw	r26, r24
    35f2:	cb 01       	movw	r24, r22
    35f4:	9c 8b       	std	Y+20, r25	; 0x14
    35f6:	8b 8b       	std	Y+19, r24	; 0x13
    35f8:	0f c0       	rjmp	.+30     	; 0x3618 <enterPass+0x5ce>
    35fa:	88 ec       	ldi	r24, 0xC8	; 200
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	9a 8b       	std	Y+18, r25	; 0x12
    3600:	89 8b       	std	Y+17, r24	; 0x11
    3602:	89 89       	ldd	r24, Y+17	; 0x11
    3604:	9a 89       	ldd	r25, Y+18	; 0x12
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <enterPass+0x5bc>
    360a:	9a 8b       	std	Y+18, r25	; 0x12
    360c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    360e:	8b 89       	ldd	r24, Y+19	; 0x13
    3610:	9c 89       	ldd	r25, Y+20	; 0x14
    3612:	01 97       	sbiw	r24, 0x01	; 1
    3614:	9c 8b       	std	Y+20, r25	; 0x14
    3616:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3618:	8b 89       	ldd	r24, Y+19	; 0x13
    361a:	9c 89       	ldd	r25, Y+20	; 0x14
    361c:	00 97       	sbiw	r24, 0x00	; 0
    361e:	69 f7       	brne	.-38     	; 0x35fa <enterPass+0x5b0>
    3620:	14 c0       	rjmp	.+40     	; 0x364a <enterPass+0x600>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3622:	6d 89       	ldd	r22, Y+21	; 0x15
    3624:	7e 89       	ldd	r23, Y+22	; 0x16
    3626:	8f 89       	ldd	r24, Y+23	; 0x17
    3628:	98 8d       	ldd	r25, Y+24	; 0x18
    362a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	9c 8b       	std	Y+20, r25	; 0x14
    3634:	8b 8b       	std	Y+19, r24	; 0x13
    3636:	8b 89       	ldd	r24, Y+19	; 0x13
    3638:	9c 89       	ldd	r25, Y+20	; 0x14
    363a:	98 8b       	std	Y+16, r25	; 0x10
    363c:	8f 87       	std	Y+15, r24	; 0x0f
    363e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3640:	98 89       	ldd	r25, Y+16	; 0x10
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	f1 f7       	brne	.-4      	; 0x3642 <enterPass+0x5f8>
    3646:	98 8b       	std	Y+16, r25	; 0x10
    3648:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(50);
		UART_sendByte(lock_System);
    364a:	8b e0       	ldi	r24, 0x0B	; 11
    364c:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <UART_sendByte>
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	a8 e4       	ldi	r26, 0x48	; 72
    3656:	b2 e4       	ldi	r27, 0x42	; 66
    3658:	8b 87       	std	Y+11, r24	; 0x0b
    365a:	9c 87       	std	Y+12, r25	; 0x0c
    365c:	ad 87       	std	Y+13, r26	; 0x0d
    365e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3660:	6b 85       	ldd	r22, Y+11	; 0x0b
    3662:	7c 85       	ldd	r23, Y+12	; 0x0c
    3664:	8d 85       	ldd	r24, Y+13	; 0x0d
    3666:	9e 85       	ldd	r25, Y+14	; 0x0e
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	4a ef       	ldi	r20, 0xFA	; 250
    366e:	54 e4       	ldi	r21, 0x44	; 68
    3670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	8f 83       	std	Y+7, r24	; 0x07
    367a:	98 87       	std	Y+8, r25	; 0x08
    367c:	a9 87       	std	Y+9, r26	; 0x09
    367e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3680:	6f 81       	ldd	r22, Y+7	; 0x07
    3682:	78 85       	ldd	r23, Y+8	; 0x08
    3684:	89 85       	ldd	r24, Y+9	; 0x09
    3686:	9a 85       	ldd	r25, Y+10	; 0x0a
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	40 e8       	ldi	r20, 0x80	; 128
    368e:	5f e3       	ldi	r21, 0x3F	; 63
    3690:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3694:	88 23       	and	r24, r24
    3696:	2c f4       	brge	.+10     	; 0x36a2 <enterPass+0x658>
		__ticks = 1;
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	9e 83       	std	Y+6, r25	; 0x06
    369e:	8d 83       	std	Y+5, r24	; 0x05
    36a0:	3f c0       	rjmp	.+126    	; 0x3720 <enterPass+0x6d6>
	else if (__tmp > 65535)
    36a2:	6f 81       	ldd	r22, Y+7	; 0x07
    36a4:	78 85       	ldd	r23, Y+8	; 0x08
    36a6:	89 85       	ldd	r24, Y+9	; 0x09
    36a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36aa:	20 e0       	ldi	r18, 0x00	; 0
    36ac:	3f ef       	ldi	r19, 0xFF	; 255
    36ae:	4f e7       	ldi	r20, 0x7F	; 127
    36b0:	57 e4       	ldi	r21, 0x47	; 71
    36b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36b6:	18 16       	cp	r1, r24
    36b8:	4c f5       	brge	.+82     	; 0x370c <enterPass+0x6c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    36bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36be:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	40 e2       	ldi	r20, 0x20	; 32
    36c8:	51 e4       	ldi	r21, 0x41	; 65
    36ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ce:	dc 01       	movw	r26, r24
    36d0:	cb 01       	movw	r24, r22
    36d2:	bc 01       	movw	r22, r24
    36d4:	cd 01       	movw	r24, r26
    36d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36da:	dc 01       	movw	r26, r24
    36dc:	cb 01       	movw	r24, r22
    36de:	9e 83       	std	Y+6, r25	; 0x06
    36e0:	8d 83       	std	Y+5, r24	; 0x05
    36e2:	0f c0       	rjmp	.+30     	; 0x3702 <enterPass+0x6b8>
    36e4:	88 ec       	ldi	r24, 0xC8	; 200
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	9c 83       	std	Y+4, r25	; 0x04
    36ea:	8b 83       	std	Y+3, r24	; 0x03
    36ec:	8b 81       	ldd	r24, Y+3	; 0x03
    36ee:	9c 81       	ldd	r25, Y+4	; 0x04
    36f0:	01 97       	sbiw	r24, 0x01	; 1
    36f2:	f1 f7       	brne	.-4      	; 0x36f0 <enterPass+0x6a6>
    36f4:	9c 83       	std	Y+4, r25	; 0x04
    36f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f8:	8d 81       	ldd	r24, Y+5	; 0x05
    36fa:	9e 81       	ldd	r25, Y+6	; 0x06
    36fc:	01 97       	sbiw	r24, 0x01	; 1
    36fe:	9e 83       	std	Y+6, r25	; 0x06
    3700:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3702:	8d 81       	ldd	r24, Y+5	; 0x05
    3704:	9e 81       	ldd	r25, Y+6	; 0x06
    3706:	00 97       	sbiw	r24, 0x00	; 0
    3708:	69 f7       	brne	.-38     	; 0x36e4 <enterPass+0x69a>
    370a:	14 c0       	rjmp	.+40     	; 0x3734 <enterPass+0x6ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    370c:	6f 81       	ldd	r22, Y+7	; 0x07
    370e:	78 85       	ldd	r23, Y+8	; 0x08
    3710:	89 85       	ldd	r24, Y+9	; 0x09
    3712:	9a 85       	ldd	r25, Y+10	; 0x0a
    3714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3718:	dc 01       	movw	r26, r24
    371a:	cb 01       	movw	r24, r22
    371c:	9e 83       	std	Y+6, r25	; 0x06
    371e:	8d 83       	std	Y+5, r24	; 0x05
    3720:	8d 81       	ldd	r24, Y+5	; 0x05
    3722:	9e 81       	ldd	r25, Y+6	; 0x06
    3724:	9a 83       	std	Y+2, r25	; 0x02
    3726:	89 83       	std	Y+1, r24	; 0x01
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	9a 81       	ldd	r25, Y+2	; 0x02
    372c:	01 97       	sbiw	r24, 0x01	; 1
    372e:	f1 f7       	brne	.-4      	; 0x372c <enterPass+0x6e2>
    3730:	9a 83       	std	Y+2, r25	; 0x02
    3732:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		g_checkCount=0;
    3734:	10 92 e0 00 	sts	0x00E0, r1

		LCD_clearScreen();
    3738:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_clearScreen>

		LCD_displayString("Error");
    373c:	8e e8       	ldi	r24, 0x8E	; 142
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayString>
		g_tick=0;
    3744:	10 92 e1 00 	sts	0x00E1, r1
		while(g_tick<=60)
    3748:	80 91 e1 00 	lds	r24, 0x00E1
    374c:	8d 33       	cpi	r24, 0x3D	; 61
    374e:	e0 f3       	brcs	.-8      	; 0x3748 <enterPass+0x6fe>
		{
		}
		LCD_clearScreen();
    3750:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_clearScreen>
		mainOptions();
    3754:	0e 94 b8 1b 	call	0x3770	; 0x3770 <mainOptions>
	}


}
    3758:	cb 5a       	subi	r28, 0xAB	; 171
    375a:	df 4f       	sbci	r29, 0xFF	; 255
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	de bf       	out	0x3e, r29	; 62
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	cd bf       	out	0x3d, r28	; 61
    3766:	cf 91       	pop	r28
    3768:	df 91       	pop	r29
    376a:	1f 91       	pop	r17
    376c:	0f 91       	pop	r16
    376e:	08 95       	ret

00003770 <mainOptions>:

void mainOptions()
{
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	cd b7       	in	r28, 0x3d	; 61
    3776:	de b7       	in	r29, 0x3e	; 62
    3778:	6c 97       	sbiw	r28, 0x1c	; 28
    377a:	0f b6       	in	r0, 0x3f	; 63
    377c:	f8 94       	cli
    377e:	de bf       	out	0x3e, r29	; 62
    3780:	0f be       	out	0x3f, r0	; 63
    3782:	cd bf       	out	0x3d, r28	; 61
	g_enter=1;
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	80 93 e3 00 	sts	0x00E3, r24
	LCD_clearScreen();
    378a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_clearScreen>
	LCD_displayString("+: Open door");
    378e:	84 e9       	ldi	r24, 0x94	; 148
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayString>
	LCD_moveCursor(1, 0);
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	60 e0       	ldi	r22, 0x00	; 0
    379a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <LCD_moveCursor>
	LCD_displayString("-: Change pass");
    379e:	81 ea       	ldi	r24, 0xA1	; 161
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayString>
	if(KEYPAD_getPressedKey()=='+')
    37a6:	0e 94 20 0a 	call	0x1440	; 0x1440 <KEYPAD_getPressedKey>
    37aa:	8b 32       	cpi	r24, 0x2B	; 43
    37ac:	09 f0       	breq	.+2      	; 0x37b0 <mainOptions+0x40>
    37ae:	a1 c0       	rjmp	.+322    	; 0x38f2 <mainOptions+0x182>
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	a8 ec       	ldi	r26, 0xC8	; 200
    37b6:	b2 e4       	ldi	r27, 0x42	; 66
    37b8:	89 8f       	std	Y+25, r24	; 0x19
    37ba:	9a 8f       	std	Y+26, r25	; 0x1a
    37bc:	ab 8f       	std	Y+27, r26	; 0x1b
    37be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c0:	69 8d       	ldd	r22, Y+25	; 0x19
    37c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	4a ef       	ldi	r20, 0xFA	; 250
    37ce:	54 e4       	ldi	r21, 0x44	; 68
    37d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	8d 8b       	std	Y+21, r24	; 0x15
    37da:	9e 8b       	std	Y+22, r25	; 0x16
    37dc:	af 8b       	std	Y+23, r26	; 0x17
    37de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    37e0:	6d 89       	ldd	r22, Y+21	; 0x15
    37e2:	7e 89       	ldd	r23, Y+22	; 0x16
    37e4:	8f 89       	ldd	r24, Y+23	; 0x17
    37e6:	98 8d       	ldd	r25, Y+24	; 0x18
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	40 e8       	ldi	r20, 0x80	; 128
    37ee:	5f e3       	ldi	r21, 0x3F	; 63
    37f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37f4:	88 23       	and	r24, r24
    37f6:	2c f4       	brge	.+10     	; 0x3802 <mainOptions+0x92>
		__ticks = 1;
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	9c 8b       	std	Y+20, r25	; 0x14
    37fe:	8b 8b       	std	Y+19, r24	; 0x13
    3800:	3f c0       	rjmp	.+126    	; 0x3880 <mainOptions+0x110>
	else if (__tmp > 65535)
    3802:	6d 89       	ldd	r22, Y+21	; 0x15
    3804:	7e 89       	ldd	r23, Y+22	; 0x16
    3806:	8f 89       	ldd	r24, Y+23	; 0x17
    3808:	98 8d       	ldd	r25, Y+24	; 0x18
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	3f ef       	ldi	r19, 0xFF	; 255
    380e:	4f e7       	ldi	r20, 0x7F	; 127
    3810:	57 e4       	ldi	r21, 0x47	; 71
    3812:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3816:	18 16       	cp	r1, r24
    3818:	4c f5       	brge	.+82     	; 0x386c <mainOptions+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    381a:	69 8d       	ldd	r22, Y+25	; 0x19
    381c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    381e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3820:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	40 e2       	ldi	r20, 0x20	; 32
    3828:	51 e4       	ldi	r21, 0x41	; 65
    382a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	bc 01       	movw	r22, r24
    3834:	cd 01       	movw	r24, r26
    3836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    383a:	dc 01       	movw	r26, r24
    383c:	cb 01       	movw	r24, r22
    383e:	9c 8b       	std	Y+20, r25	; 0x14
    3840:	8b 8b       	std	Y+19, r24	; 0x13
    3842:	0f c0       	rjmp	.+30     	; 0x3862 <mainOptions+0xf2>
    3844:	88 ec       	ldi	r24, 0xC8	; 200
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	9a 8b       	std	Y+18, r25	; 0x12
    384a:	89 8b       	std	Y+17, r24	; 0x11
    384c:	89 89       	ldd	r24, Y+17	; 0x11
    384e:	9a 89       	ldd	r25, Y+18	; 0x12
    3850:	01 97       	sbiw	r24, 0x01	; 1
    3852:	f1 f7       	brne	.-4      	; 0x3850 <mainOptions+0xe0>
    3854:	9a 8b       	std	Y+18, r25	; 0x12
    3856:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3858:	8b 89       	ldd	r24, Y+19	; 0x13
    385a:	9c 89       	ldd	r25, Y+20	; 0x14
    385c:	01 97       	sbiw	r24, 0x01	; 1
    385e:	9c 8b       	std	Y+20, r25	; 0x14
    3860:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3862:	8b 89       	ldd	r24, Y+19	; 0x13
    3864:	9c 89       	ldd	r25, Y+20	; 0x14
    3866:	00 97       	sbiw	r24, 0x00	; 0
    3868:	69 f7       	brne	.-38     	; 0x3844 <mainOptions+0xd4>
    386a:	14 c0       	rjmp	.+40     	; 0x3894 <mainOptions+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386c:	6d 89       	ldd	r22, Y+21	; 0x15
    386e:	7e 89       	ldd	r23, Y+22	; 0x16
    3870:	8f 89       	ldd	r24, Y+23	; 0x17
    3872:	98 8d       	ldd	r25, Y+24	; 0x18
    3874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	9c 8b       	std	Y+20, r25	; 0x14
    387e:	8b 8b       	std	Y+19, r24	; 0x13
    3880:	8b 89       	ldd	r24, Y+19	; 0x13
    3882:	9c 89       	ldd	r25, Y+20	; 0x14
    3884:	98 8b       	std	Y+16, r25	; 0x10
    3886:	8f 87       	std	Y+15, r24	; 0x0f
    3888:	8f 85       	ldd	r24, Y+15	; 0x0f
    388a:	98 89       	ldd	r25, Y+16	; 0x10
    388c:	01 97       	sbiw	r24, 0x01	; 1
    388e:	f1 f7       	brne	.-4      	; 0x388c <mainOptions+0x11c>
    3890:	98 8b       	std	Y+16, r25	; 0x10
    3892:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(100);
		enterPass();
    3894:	0e 94 25 18 	call	0x304a	; 0x304a <enterPass>
		if(g_enter==0)
    3898:	80 91 e3 00 	lds	r24, 0x00E3
    389c:	88 23       	and	r24, r24
    389e:	09 f4       	brne	.+2      	; 0x38a2 <mainOptions+0x132>
    38a0:	a5 c0       	rjmp	.+330    	; 0x39ec <mainOptions+0x27c>
			return;
		UART_sendByte(open_Door);
    38a2:	8d e0       	ldi	r24, 0x0D	; 13
    38a4:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <UART_sendByte>

		g_tick=0;
    38a8:	10 92 e1 00 	sts	0x00E1, r1
		LCD_clearScreen();
    38ac:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_clearScreen>
		LCD_displayString("Door unlocking");
    38b0:	80 eb       	ldi	r24, 0xB0	; 176
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayString>
		while(g_tick<=15)
    38b8:	80 91 e1 00 	lds	r24, 0x00E1
    38bc:	80 31       	cpi	r24, 0x10	; 16
    38be:	e0 f3       	brcs	.-8      	; 0x38b8 <mainOptions+0x148>
		{

		}

		LCD_clearScreen();
    38c0:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_clearScreen>
		LCD_displayString("...");
    38c4:	8f eb       	ldi	r24, 0xBF	; 191
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayString>
		g_tick=0;
    38cc:	10 92 e1 00 	sts	0x00E1, r1
		while(g_tick<=3)
    38d0:	80 91 e1 00 	lds	r24, 0x00E1
    38d4:	84 30       	cpi	r24, 0x04	; 4
    38d6:	e0 f3       	brcs	.-8      	; 0x38d0 <mainOptions+0x160>
		{

		}

		g_tick=0;
    38d8:	10 92 e1 00 	sts	0x00E1, r1
		LCD_clearScreen();
    38dc:	0e 94 64 10 	call	0x20c8	; 0x20c8 <LCD_clearScreen>
		LCD_displayString("Door locking");
    38e0:	83 ec       	ldi	r24, 0xC3	; 195
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <LCD_displayString>
		while(g_tick<=15)
    38e8:	80 91 e1 00 	lds	r24, 0x00E1
    38ec:	80 31       	cpi	r24, 0x10	; 16
    38ee:	e0 f3       	brcs	.-8      	; 0x38e8 <mainOptions+0x178>
    38f0:	7d c0       	rjmp	.+250    	; 0x39ec <mainOptions+0x27c>
		{
		}

	}
	else if(KEYPAD_getPressedKey()=='-')
    38f2:	0e 94 20 0a 	call	0x1440	; 0x1440 <KEYPAD_getPressedKey>
    38f6:	8d 32       	cpi	r24, 0x2D	; 45
    38f8:	09 f0       	breq	.+2      	; 0x38fc <mainOptions+0x18c>
    38fa:	78 c0       	rjmp	.+240    	; 0x39ec <mainOptions+0x27c>
	{
		g_enter=0;
    38fc:	10 92 e3 00 	sts	0x00E3, r1
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	a8 ec       	ldi	r26, 0xC8	; 200
    3906:	b2 e4       	ldi	r27, 0x42	; 66
    3908:	8b 87       	std	Y+11, r24	; 0x0b
    390a:	9c 87       	std	Y+12, r25	; 0x0c
    390c:	ad 87       	std	Y+13, r26	; 0x0d
    390e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3910:	6b 85       	ldd	r22, Y+11	; 0x0b
    3912:	7c 85       	ldd	r23, Y+12	; 0x0c
    3914:	8d 85       	ldd	r24, Y+13	; 0x0d
    3916:	9e 85       	ldd	r25, Y+14	; 0x0e
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	4a ef       	ldi	r20, 0xFA	; 250
    391e:	54 e4       	ldi	r21, 0x44	; 68
    3920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	8f 83       	std	Y+7, r24	; 0x07
    392a:	98 87       	std	Y+8, r25	; 0x08
    392c:	a9 87       	std	Y+9, r26	; 0x09
    392e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3930:	6f 81       	ldd	r22, Y+7	; 0x07
    3932:	78 85       	ldd	r23, Y+8	; 0x08
    3934:	89 85       	ldd	r24, Y+9	; 0x09
    3936:	9a 85       	ldd	r25, Y+10	; 0x0a
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e8       	ldi	r20, 0x80	; 128
    393e:	5f e3       	ldi	r21, 0x3F	; 63
    3940:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3944:	88 23       	and	r24, r24
    3946:	2c f4       	brge	.+10     	; 0x3952 <mainOptions+0x1e2>
		__ticks = 1;
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	9e 83       	std	Y+6, r25	; 0x06
    394e:	8d 83       	std	Y+5, r24	; 0x05
    3950:	3f c0       	rjmp	.+126    	; 0x39d0 <mainOptions+0x260>
	else if (__tmp > 65535)
    3952:	6f 81       	ldd	r22, Y+7	; 0x07
    3954:	78 85       	ldd	r23, Y+8	; 0x08
    3956:	89 85       	ldd	r24, Y+9	; 0x09
    3958:	9a 85       	ldd	r25, Y+10	; 0x0a
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	3f ef       	ldi	r19, 0xFF	; 255
    395e:	4f e7       	ldi	r20, 0x7F	; 127
    3960:	57 e4       	ldi	r21, 0x47	; 71
    3962:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3966:	18 16       	cp	r1, r24
    3968:	4c f5       	brge	.+82     	; 0x39bc <mainOptions+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    396a:	6b 85       	ldd	r22, Y+11	; 0x0b
    396c:	7c 85       	ldd	r23, Y+12	; 0x0c
    396e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3970:	9e 85       	ldd	r25, Y+14	; 0x0e
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e2       	ldi	r20, 0x20	; 32
    3978:	51 e4       	ldi	r21, 0x41	; 65
    397a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	bc 01       	movw	r22, r24
    3984:	cd 01       	movw	r24, r26
    3986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	9e 83       	std	Y+6, r25	; 0x06
    3990:	8d 83       	std	Y+5, r24	; 0x05
    3992:	0f c0       	rjmp	.+30     	; 0x39b2 <mainOptions+0x242>
    3994:	88 ec       	ldi	r24, 0xC8	; 200
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	9c 83       	std	Y+4, r25	; 0x04
    399a:	8b 83       	std	Y+3, r24	; 0x03
    399c:	8b 81       	ldd	r24, Y+3	; 0x03
    399e:	9c 81       	ldd	r25, Y+4	; 0x04
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	f1 f7       	brne	.-4      	; 0x39a0 <mainOptions+0x230>
    39a4:	9c 83       	std	Y+4, r25	; 0x04
    39a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a8:	8d 81       	ldd	r24, Y+5	; 0x05
    39aa:	9e 81       	ldd	r25, Y+6	; 0x06
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	9e 83       	std	Y+6, r25	; 0x06
    39b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b2:	8d 81       	ldd	r24, Y+5	; 0x05
    39b4:	9e 81       	ldd	r25, Y+6	; 0x06
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	69 f7       	brne	.-38     	; 0x3994 <mainOptions+0x224>
    39ba:	14 c0       	rjmp	.+40     	; 0x39e4 <mainOptions+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39bc:	6f 81       	ldd	r22, Y+7	; 0x07
    39be:	78 85       	ldd	r23, Y+8	; 0x08
    39c0:	89 85       	ldd	r24, Y+9	; 0x09
    39c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	9e 83       	std	Y+6, r25	; 0x06
    39ce:	8d 83       	std	Y+5, r24	; 0x05
    39d0:	8d 81       	ldd	r24, Y+5	; 0x05
    39d2:	9e 81       	ldd	r25, Y+6	; 0x06
    39d4:	9a 83       	std	Y+2, r25	; 0x02
    39d6:	89 83       	std	Y+1, r24	; 0x01
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	9a 81       	ldd	r25, Y+2	; 0x02
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	f1 f7       	brne	.-4      	; 0x39dc <mainOptions+0x26c>
    39e0:	9a 83       	std	Y+2, r25	; 0x02
    39e2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		enterPass();
    39e4:	0e 94 25 18 	call	0x304a	; 0x304a <enterPass>
		newPass();
    39e8:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <newPass>
	}
}
    39ec:	6c 96       	adiw	r28, 0x1c	; 28
    39ee:	0f b6       	in	r0, 0x3f	; 63
    39f0:	f8 94       	cli
    39f2:	de bf       	out	0x3e, r29	; 62
    39f4:	0f be       	out	0x3f, r0	; 63
    39f6:	cd bf       	out	0x3d, r28	; 61
    39f8:	cf 91       	pop	r28
    39fa:	df 91       	pop	r29
    39fc:	08 95       	ret

000039fe <main>:




int main()
{
    39fe:	df 93       	push	r29
    3a00:	cf 93       	push	r28
    3a02:	cd b7       	in	r28, 0x3d	; 61
    3a04:	de b7       	in	r29, 0x3e	; 62
    3a06:	2d 97       	sbiw	r28, 0x0d	; 13
    3a08:	0f b6       	in	r0, 0x3f	; 63
    3a0a:	f8 94       	cli
    3a0c:	de bf       	out	0x3e, r29	; 62
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Set the I-bit to 1.
	*/
	SREG|=(1<<7);
    3a12:	af e5       	ldi	r26, 0x5F	; 95
    3a14:	b0 e0       	ldi	r27, 0x00	; 0
    3a16:	ef e5       	ldi	r30, 0x5F	; 95
    3a18:	f0 e0       	ldi	r31, 0x00	; 0
    3a1a:	80 81       	ld	r24, Z
    3a1c:	80 68       	ori	r24, 0x80	; 128
    3a1e:	8c 93       	st	X, r24
	/*
	 * Initialize the Uart driver with the required configurations
	*/

	UART_ConfigType o_uartConfig;
	o_uartConfig.bit_data=bit8;
    3a20:	86 e0       	ldi	r24, 0x06	; 6
    3a22:	8f 83       	std	Y+7, r24	; 0x07
	o_uartConfig.parity=NoParity;
    3a24:	18 86       	std	Y+8, r1	; 0x08
	o_uartConfig.baud_rate=9600;
    3a26:	80 e8       	ldi	r24, 0x80	; 128
    3a28:	95 e2       	ldi	r25, 0x25	; 37
    3a2a:	a0 e0       	ldi	r26, 0x00	; 0
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	8a 87       	std	Y+10, r24	; 0x0a
    3a30:	9b 87       	std	Y+11, r25	; 0x0b
    3a32:	ac 87       	std	Y+12, r26	; 0x0c
    3a34:	bd 87       	std	Y+13, r27	; 0x0d
	UART_init(&o_uartConfig);
    3a36:	ce 01       	movw	r24, r28
    3a38:	07 96       	adiw	r24, 0x07	; 7
    3a3a:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <UART_init>

	LCD_init();
    3a3e:	0e 94 43 0b 	call	0x1686	; 0x1686 <LCD_init>
	/*
	 * Initialize the timer driver with the required configurations
	 * and set the callback function.
	 */

	o_timerConfig.initial_value=0;
    3a42:	1a 82       	std	Y+2, r1	; 0x02
    3a44:	19 82       	std	Y+1, r1	; 0x01
	o_timerConfig.mode=CompareMode;
    3a46:	88 e0       	ldi	r24, 0x08	; 8
    3a48:	8e 83       	std	Y+6, r24	; 0x06
	o_timerConfig.prescaler=clk1024;
    3a4a:	85 e0       	ldi	r24, 0x05	; 5
    3a4c:	8d 83       	std	Y+5, r24	; 0x05
	o_timerConfig.compare_value=7812;
    3a4e:	84 e8       	ldi	r24, 0x84	; 132
    3a50:	9e e1       	ldi	r25, 0x1E	; 30
    3a52:	9c 83       	std	Y+4, r25	; 0x04
    3a54:	8b 83       	std	Y+3, r24	; 0x03
	Timer1_init(&o_timerConfig);
    3a56:	ce 01       	movw	r24, r28
    3a58:	01 96       	adiw	r24, 0x01	; 1
    3a5a:	0e 94 82 06 	call	0xd04	; 0xd04 <Timer1_init>
	Timer1_setCallBack(timerTick);
    3a5e:	8e e6       	ldi	r24, 0x6E	; 110
    3a60:	90 e1       	ldi	r25, 0x10	; 16
    3a62:	0e 94 d0 06 	call	0xda0	; 0xda0 <Timer1_setCallBack>

	/*
	 * Set a new password for the system at the beginning of the application
	 */

	newPass();
    3a66:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <newPass>


	while (1)
	{
		mainOptions();
    3a6a:	0e 94 b8 1b 	call	0x3770	; 0x3770 <mainOptions>
    3a6e:	fd cf       	rjmp	.-6      	; 0x3a6a <main+0x6c>

00003a70 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3a70:	df 93       	push	r29
    3a72:	cf 93       	push	r28
    3a74:	00 d0       	rcall	.+0      	; 0x3a76 <UART_init+0x6>
    3a76:	00 d0       	rcall	.+0      	; 0x3a78 <UART_init+0x8>
    3a78:	cd b7       	in	r28, 0x3d	; 61
    3a7a:	de b7       	in	r29, 0x3e	; 62
    3a7c:	9c 83       	std	Y+4, r25	; 0x04
    3a7e:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3a80:	1a 82       	std	Y+2, r1	; 0x02
    3a82:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3a84:	eb e2       	ldi	r30, 0x2B	; 43
    3a86:	f0 e0       	ldi	r31, 0x00	; 0
    3a88:	82 e0       	ldi	r24, 0x02	; 2
    3a8a:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3a8c:	ea e2       	ldi	r30, 0x2A	; 42
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	88 e1       	ldi	r24, 0x18	; 24
    3a92:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3a94:	e0 e4       	ldi	r30, 0x40	; 64
    3a96:	f0 e0       	ldi	r31, 0x00	; 0
    3a98:	80 e8       	ldi	r24, 0x80	; 128
    3a9a:	80 83       	st	Z, r24
	UCSRC|=Config_Ptr->parity;
    3a9c:	a0 e4       	ldi	r26, 0x40	; 64
    3a9e:	b0 e0       	ldi	r27, 0x00	; 0
    3aa0:	e0 e4       	ldi	r30, 0x40	; 64
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	90 81       	ld	r25, Z
    3aa6:	eb 81       	ldd	r30, Y+3	; 0x03
    3aa8:	fc 81       	ldd	r31, Y+4	; 0x04
    3aaa:	81 81       	ldd	r24, Z+1	; 0x01
    3aac:	89 2b       	or	r24, r25
    3aae:	8c 93       	st	X, r24
	UCSRC|=Config_Ptr->stop_bit;
    3ab0:	a0 e4       	ldi	r26, 0x40	; 64
    3ab2:	b0 e0       	ldi	r27, 0x00	; 0
    3ab4:	e0 e4       	ldi	r30, 0x40	; 64
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	90 81       	ld	r25, Z
    3aba:	eb 81       	ldd	r30, Y+3	; 0x03
    3abc:	fc 81       	ldd	r31, Y+4	; 0x04
    3abe:	82 81       	ldd	r24, Z+2	; 0x02
    3ac0:	89 2b       	or	r24, r25
    3ac2:	8c 93       	st	X, r24
	UCSRC|=Config_Ptr->bit_data;
    3ac4:	a0 e4       	ldi	r26, 0x40	; 64
    3ac6:	b0 e0       	ldi	r27, 0x00	; 0
    3ac8:	e0 e4       	ldi	r30, 0x40	; 64
    3aca:	f0 e0       	ldi	r31, 0x00	; 0
    3acc:	90 81       	ld	r25, Z
    3ace:	eb 81       	ldd	r30, Y+3	; 0x03
    3ad0:	fc 81       	ldd	r31, Y+4	; 0x04
    3ad2:	80 81       	ld	r24, Z
    3ad4:	89 2b       	or	r24, r25
    3ad6:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3ad8:	eb 81       	ldd	r30, Y+3	; 0x03
    3ada:	fc 81       	ldd	r31, Y+4	; 0x04
    3adc:	83 81       	ldd	r24, Z+3	; 0x03
    3ade:	94 81       	ldd	r25, Z+4	; 0x04
    3ae0:	a5 81       	ldd	r26, Z+5	; 0x05
    3ae2:	b6 81       	ldd	r27, Z+6	; 0x06
    3ae4:	88 0f       	add	r24, r24
    3ae6:	99 1f       	adc	r25, r25
    3ae8:	aa 1f       	adc	r26, r26
    3aea:	bb 1f       	adc	r27, r27
    3aec:	88 0f       	add	r24, r24
    3aee:	99 1f       	adc	r25, r25
    3af0:	aa 1f       	adc	r26, r26
    3af2:	bb 1f       	adc	r27, r27
    3af4:	88 0f       	add	r24, r24
    3af6:	99 1f       	adc	r25, r25
    3af8:	aa 1f       	adc	r26, r26
    3afa:	bb 1f       	adc	r27, r27
    3afc:	9c 01       	movw	r18, r24
    3afe:	ad 01       	movw	r20, r26
    3b00:	80 e0       	ldi	r24, 0x00	; 0
    3b02:	92 e1       	ldi	r25, 0x12	; 18
    3b04:	aa e7       	ldi	r26, 0x7A	; 122
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	bc 01       	movw	r22, r24
    3b0a:	cd 01       	movw	r24, r26
    3b0c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <__udivmodsi4>
    3b10:	da 01       	movw	r26, r20
    3b12:	c9 01       	movw	r24, r18
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	9a 83       	std	Y+2, r25	; 0x02
    3b18:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3b1a:	e0 e4       	ldi	r30, 0x40	; 64
    3b1c:	f0 e0       	ldi	r31, 0x00	; 0
    3b1e:	89 81       	ldd	r24, Y+1	; 0x01
    3b20:	9a 81       	ldd	r25, Y+2	; 0x02
    3b22:	89 2f       	mov	r24, r25
    3b24:	99 27       	eor	r25, r25
    3b26:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3b28:	e9 e2       	ldi	r30, 0x29	; 41
    3b2a:	f0 e0       	ldi	r31, 0x00	; 0
    3b2c:	89 81       	ldd	r24, Y+1	; 0x01
    3b2e:	80 83       	st	Z, r24
}
    3b30:	0f 90       	pop	r0
    3b32:	0f 90       	pop	r0
    3b34:	0f 90       	pop	r0
    3b36:	0f 90       	pop	r0
    3b38:	cf 91       	pop	r28
    3b3a:	df 91       	pop	r29
    3b3c:	08 95       	ret

00003b3e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	0f 92       	push	r0
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3b4a:	eb e2       	ldi	r30, 0x2B	; 43
    3b4c:	f0 e0       	ldi	r31, 0x00	; 0
    3b4e:	80 81       	ld	r24, Z
    3b50:	88 2f       	mov	r24, r24
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	80 72       	andi	r24, 0x20	; 32
    3b56:	90 70       	andi	r25, 0x00	; 0
    3b58:	00 97       	sbiw	r24, 0x00	; 0
    3b5a:	b9 f3       	breq	.-18     	; 0x3b4a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3b5c:	ec e2       	ldi	r30, 0x2C	; 44
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	89 81       	ldd	r24, Y+1	; 0x01
    3b62:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3b64:	0f 90       	pop	r0
    3b66:	cf 91       	pop	r28
    3b68:	df 91       	pop	r29
    3b6a:	08 95       	ret

00003b6c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3b74:	eb e2       	ldi	r30, 0x2B	; 43
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	80 81       	ld	r24, Z
    3b7a:	88 23       	and	r24, r24
    3b7c:	dc f7       	brge	.-10     	; 0x3b74 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3b7e:	ec e2       	ldi	r30, 0x2C	; 44
    3b80:	f0 e0       	ldi	r31, 0x00	; 0
    3b82:	80 81       	ld	r24, Z
}
    3b84:	cf 91       	pop	r28
    3b86:	df 91       	pop	r29
    3b88:	08 95       	ret

00003b8a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3b8a:	df 93       	push	r29
    3b8c:	cf 93       	push	r28
    3b8e:	00 d0       	rcall	.+0      	; 0x3b90 <UART_sendString+0x6>
    3b90:	0f 92       	push	r0
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
    3b96:	9b 83       	std	Y+3, r25	; 0x03
    3b98:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b9a:	19 82       	std	Y+1, r1	; 0x01
    3b9c:	0e c0       	rjmp	.+28     	; 0x3bba <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3b9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ba0:	28 2f       	mov	r18, r24
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba8:	fc 01       	movw	r30, r24
    3baa:	e2 0f       	add	r30, r18
    3bac:	f3 1f       	adc	r31, r19
    3bae:	80 81       	ld	r24, Z
    3bb0:	0e 94 9f 1d 	call	0x3b3e	; 0x3b3e <UART_sendByte>
		i++;
    3bb4:	89 81       	ldd	r24, Y+1	; 0x01
    3bb6:	8f 5f       	subi	r24, 0xFF	; 255
    3bb8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3bba:	89 81       	ldd	r24, Y+1	; 0x01
    3bbc:	28 2f       	mov	r18, r24
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	e2 0f       	add	r30, r18
    3bc8:	f3 1f       	adc	r31, r19
    3bca:	80 81       	ld	r24, Z
    3bcc:	88 23       	and	r24, r24
    3bce:	39 f7       	brne	.-50     	; 0x3b9e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	cf 91       	pop	r28
    3bd8:	df 91       	pop	r29
    3bda:	08 95       	ret

00003bdc <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3bdc:	0f 93       	push	r16
    3bde:	1f 93       	push	r17
    3be0:	df 93       	push	r29
    3be2:	cf 93       	push	r28
    3be4:	00 d0       	rcall	.+0      	; 0x3be6 <UART_receiveString+0xa>
    3be6:	0f 92       	push	r0
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
    3bec:	9b 83       	std	Y+3, r25	; 0x03
    3bee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3bf0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3bf2:	89 81       	ldd	r24, Y+1	; 0x01
    3bf4:	28 2f       	mov	r18, r24
    3bf6:	30 e0       	ldi	r19, 0x00	; 0
    3bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    3bfc:	8c 01       	movw	r16, r24
    3bfe:	02 0f       	add	r16, r18
    3c00:	13 1f       	adc	r17, r19
    3c02:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <UART_recieveByte>
    3c06:	f8 01       	movw	r30, r16
    3c08:	80 83       	st	Z, r24
    3c0a:	0f c0       	rjmp	.+30     	; 0x3c2a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '=')
	{
		i++;
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	8f 5f       	subi	r24, 0xFF	; 255
    3c10:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	28 2f       	mov	r18, r24
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c1c:	8c 01       	movw	r16, r24
    3c1e:	02 0f       	add	r16, r18
    3c20:	13 1f       	adc	r17, r19
    3c22:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <UART_recieveByte>
    3c26:	f8 01       	movw	r30, r16
    3c28:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '=')
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	28 2f       	mov	r18, r24
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	8a 81       	ldd	r24, Y+2	; 0x02
    3c32:	9b 81       	ldd	r25, Y+3	; 0x03
    3c34:	fc 01       	movw	r30, r24
    3c36:	e2 0f       	add	r30, r18
    3c38:	f3 1f       	adc	r31, r19
    3c3a:	80 81       	ld	r24, Z
    3c3c:	8d 33       	cpi	r24, 0x3D	; 61
    3c3e:	31 f7       	brne	.-52     	; 0x3c0c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	28 2f       	mov	r18, r24
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	8a 81       	ldd	r24, Y+2	; 0x02
    3c48:	9b 81       	ldd	r25, Y+3	; 0x03
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	e2 0f       	add	r30, r18
    3c4e:	f3 1f       	adc	r31, r19
    3c50:	10 82       	st	Z, r1
}
    3c52:	0f 90       	pop	r0
    3c54:	0f 90       	pop	r0
    3c56:	0f 90       	pop	r0
    3c58:	cf 91       	pop	r28
    3c5a:	df 91       	pop	r29
    3c5c:	1f 91       	pop	r17
    3c5e:	0f 91       	pop	r16
    3c60:	08 95       	ret

00003c62 <__udivmodsi4>:
    3c62:	a1 e2       	ldi	r26, 0x21	; 33
    3c64:	1a 2e       	mov	r1, r26
    3c66:	aa 1b       	sub	r26, r26
    3c68:	bb 1b       	sub	r27, r27
    3c6a:	fd 01       	movw	r30, r26
    3c6c:	0d c0       	rjmp	.+26     	; 0x3c88 <__udivmodsi4_ep>

00003c6e <__udivmodsi4_loop>:
    3c6e:	aa 1f       	adc	r26, r26
    3c70:	bb 1f       	adc	r27, r27
    3c72:	ee 1f       	adc	r30, r30
    3c74:	ff 1f       	adc	r31, r31
    3c76:	a2 17       	cp	r26, r18
    3c78:	b3 07       	cpc	r27, r19
    3c7a:	e4 07       	cpc	r30, r20
    3c7c:	f5 07       	cpc	r31, r21
    3c7e:	20 f0       	brcs	.+8      	; 0x3c88 <__udivmodsi4_ep>
    3c80:	a2 1b       	sub	r26, r18
    3c82:	b3 0b       	sbc	r27, r19
    3c84:	e4 0b       	sbc	r30, r20
    3c86:	f5 0b       	sbc	r31, r21

00003c88 <__udivmodsi4_ep>:
    3c88:	66 1f       	adc	r22, r22
    3c8a:	77 1f       	adc	r23, r23
    3c8c:	88 1f       	adc	r24, r24
    3c8e:	99 1f       	adc	r25, r25
    3c90:	1a 94       	dec	r1
    3c92:	69 f7       	brne	.-38     	; 0x3c6e <__udivmodsi4_loop>
    3c94:	60 95       	com	r22
    3c96:	70 95       	com	r23
    3c98:	80 95       	com	r24
    3c9a:	90 95       	com	r25
    3c9c:	9b 01       	movw	r18, r22
    3c9e:	ac 01       	movw	r20, r24
    3ca0:	bd 01       	movw	r22, r26
    3ca2:	cf 01       	movw	r24, r30
    3ca4:	08 95       	ret

00003ca6 <__prologue_saves__>:
    3ca6:	2f 92       	push	r2
    3ca8:	3f 92       	push	r3
    3caa:	4f 92       	push	r4
    3cac:	5f 92       	push	r5
    3cae:	6f 92       	push	r6
    3cb0:	7f 92       	push	r7
    3cb2:	8f 92       	push	r8
    3cb4:	9f 92       	push	r9
    3cb6:	af 92       	push	r10
    3cb8:	bf 92       	push	r11
    3cba:	cf 92       	push	r12
    3cbc:	df 92       	push	r13
    3cbe:	ef 92       	push	r14
    3cc0:	ff 92       	push	r15
    3cc2:	0f 93       	push	r16
    3cc4:	1f 93       	push	r17
    3cc6:	cf 93       	push	r28
    3cc8:	df 93       	push	r29
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
    3cce:	ca 1b       	sub	r28, r26
    3cd0:	db 0b       	sbc	r29, r27
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	f8 94       	cli
    3cd6:	de bf       	out	0x3e, r29	; 62
    3cd8:	0f be       	out	0x3f, r0	; 63
    3cda:	cd bf       	out	0x3d, r28	; 61
    3cdc:	09 94       	ijmp

00003cde <__epilogue_restores__>:
    3cde:	2a 88       	ldd	r2, Y+18	; 0x12
    3ce0:	39 88       	ldd	r3, Y+17	; 0x11
    3ce2:	48 88       	ldd	r4, Y+16	; 0x10
    3ce4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ce6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ce8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cea:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cec:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cee:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cf0:	b9 84       	ldd	r11, Y+9	; 0x09
    3cf2:	c8 84       	ldd	r12, Y+8	; 0x08
    3cf4:	df 80       	ldd	r13, Y+7	; 0x07
    3cf6:	ee 80       	ldd	r14, Y+6	; 0x06
    3cf8:	fd 80       	ldd	r15, Y+5	; 0x05
    3cfa:	0c 81       	ldd	r16, Y+4	; 0x04
    3cfc:	1b 81       	ldd	r17, Y+3	; 0x03
    3cfe:	aa 81       	ldd	r26, Y+2	; 0x02
    3d00:	b9 81       	ldd	r27, Y+1	; 0x01
    3d02:	ce 0f       	add	r28, r30
    3d04:	d1 1d       	adc	r29, r1
    3d06:	0f b6       	in	r0, 0x3f	; 63
    3d08:	f8 94       	cli
    3d0a:	de bf       	out	0x3e, r29	; 62
    3d0c:	0f be       	out	0x3f, r0	; 63
    3d0e:	cd bf       	out	0x3d, r28	; 61
    3d10:	ed 01       	movw	r28, r26
    3d12:	08 95       	ret

00003d14 <itoa>:
    3d14:	fb 01       	movw	r30, r22
    3d16:	9f 01       	movw	r18, r30
    3d18:	e8 94       	clt
    3d1a:	42 30       	cpi	r20, 0x02	; 2
    3d1c:	c4 f0       	brlt	.+48     	; 0x3d4e <itoa+0x3a>
    3d1e:	45 32       	cpi	r20, 0x25	; 37
    3d20:	b4 f4       	brge	.+44     	; 0x3d4e <itoa+0x3a>
    3d22:	4a 30       	cpi	r20, 0x0A	; 10
    3d24:	29 f4       	brne	.+10     	; 0x3d30 <itoa+0x1c>
    3d26:	97 fb       	bst	r25, 7
    3d28:	1e f4       	brtc	.+6      	; 0x3d30 <itoa+0x1c>
    3d2a:	90 95       	com	r25
    3d2c:	81 95       	neg	r24
    3d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    3d30:	64 2f       	mov	r22, r20
    3d32:	77 27       	eor	r23, r23
    3d34:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <__udivmodhi4>
    3d38:	80 5d       	subi	r24, 0xD0	; 208
    3d3a:	8a 33       	cpi	r24, 0x3A	; 58
    3d3c:	0c f0       	brlt	.+2      	; 0x3d40 <itoa+0x2c>
    3d3e:	89 5d       	subi	r24, 0xD9	; 217
    3d40:	81 93       	st	Z+, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	00 97       	sbiw	r24, 0x00	; 0
    3d46:	a1 f7       	brne	.-24     	; 0x3d30 <itoa+0x1c>
    3d48:	16 f4       	brtc	.+4      	; 0x3d4e <itoa+0x3a>
    3d4a:	5d e2       	ldi	r21, 0x2D	; 45
    3d4c:	51 93       	st	Z+, r21
    3d4e:	10 82       	st	Z, r1
    3d50:	c9 01       	movw	r24, r18
    3d52:	0c 94 ab 1e 	jmp	0x3d56	; 0x3d56 <strrev>

00003d56 <strrev>:
    3d56:	dc 01       	movw	r26, r24
    3d58:	fc 01       	movw	r30, r24
    3d5a:	67 2f       	mov	r22, r23
    3d5c:	71 91       	ld	r23, Z+
    3d5e:	77 23       	and	r23, r23
    3d60:	e1 f7       	brne	.-8      	; 0x3d5a <strrev+0x4>
    3d62:	32 97       	sbiw	r30, 0x02	; 2
    3d64:	04 c0       	rjmp	.+8      	; 0x3d6e <strrev+0x18>
    3d66:	7c 91       	ld	r23, X
    3d68:	6d 93       	st	X+, r22
    3d6a:	70 83       	st	Z, r23
    3d6c:	62 91       	ld	r22, -Z
    3d6e:	ae 17       	cp	r26, r30
    3d70:	bf 07       	cpc	r27, r31
    3d72:	c8 f3       	brcs	.-14     	; 0x3d66 <strrev+0x10>
    3d74:	08 95       	ret

00003d76 <__udivmodhi4>:
    3d76:	aa 1b       	sub	r26, r26
    3d78:	bb 1b       	sub	r27, r27
    3d7a:	51 e1       	ldi	r21, 0x11	; 17
    3d7c:	07 c0       	rjmp	.+14     	; 0x3d8c <__udivmodhi4_ep>

00003d7e <__udivmodhi4_loop>:
    3d7e:	aa 1f       	adc	r26, r26
    3d80:	bb 1f       	adc	r27, r27
    3d82:	a6 17       	cp	r26, r22
    3d84:	b7 07       	cpc	r27, r23
    3d86:	10 f0       	brcs	.+4      	; 0x3d8c <__udivmodhi4_ep>
    3d88:	a6 1b       	sub	r26, r22
    3d8a:	b7 0b       	sbc	r27, r23

00003d8c <__udivmodhi4_ep>:
    3d8c:	88 1f       	adc	r24, r24
    3d8e:	99 1f       	adc	r25, r25
    3d90:	5a 95       	dec	r21
    3d92:	a9 f7       	brne	.-22     	; 0x3d7e <__udivmodhi4_loop>
    3d94:	80 95       	com	r24
    3d96:	90 95       	com	r25
    3d98:	bc 01       	movw	r22, r24
    3d9a:	cd 01       	movw	r24, r26
    3d9c:	08 95       	ret

00003d9e <_exit>:
    3d9e:	f8 94       	cli

00003da0 <__stop_program>:
    3da0:	ff cf       	rjmp	.-2      	; 0x3da0 <__stop_program>
